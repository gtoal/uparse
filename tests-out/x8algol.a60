b̲e̲g̲i̲n̲
   c̲o̲m̲m̲e̲n̲t̲         ALGOL 60 - version of the ALGOL 60 - translator
     for the EL - X8, F.E.J. Kruseman Aretz;

   c̲o̲m̲m̲e̲n̲t̲         basic symbols;
   i̲n̲t̲e̲g̲e̲r̲ plus, minus, mul, div, idi, ttp, equ, uqu, les, mst, mor, lst,
     non, qvl, imp, or, and, goto, for, step, until, while, do,
     comma, period, ten, colon, semicolon, colonequal, space sbl,
     if, then, else, comment, open, close, sub, bus, quote, unquote,
     begin, end, own, rea, integ, boole, stri, array, proced, switch,
     label, value, true, false, new line, underlining, bar;

   c̲o̲m̲m̲e̲n̲t̲         other global integers;
   i̲n̲t̲e̲g̲e̲r̲ case, lower case, stock, stock1, last symbol, line counter,
     last identifier, last identifierl,
     quote counter, run number, shift,
     type, chara, character, value character, arr decla macro,
     value of constant, decimal exponent, decimal count,
     word count, nlp, last nlp, n, integer label,
     block cell pointer, next block cell pointer,
     dimension, for count, instruct counter, dp0,
     function letter, function digit, c variant,
     nl base, prog base, text base, text pointer,
     end of text, end of memory, start, end of list,
     d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14,
     d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25,
     re, in, bo, st, ar, nondes, des, un, arbo, intlab;

   c̲o̲m̲m̲e̲n̲t̲         macro identifiers;
   i̲n̲t̲e̲g̲e̲r̲ STACK, NEG, ADD, SUB, MUL, DIV, IDI, TTP,
     EQU, UQU, LES, MST, MOR, LST, STAB, NON, QVL, IMP, OR, AND,
     STAA, TSR, TSI, TSB, TSST, TFSU, TSL, TFSL, TCST,
     STSR, STSI, SSTSI, STSB, STSST, STFSU,
     ENTRIS, TFD, SAS, DECS, FAD, TASR, TASI, TASB, TASST, TASU,
     EXITIS, FADCV, TRSCV, TISCV, TSCVU, EXIT, TEST1, TEST2,
     CRV, CIV, CBV, CSTV, CLV, CEN, CLPN, TAV, TIAV,
     RAD, IAD, BAD, STAD, ORAD, OIAD, OBAD, OSTAD,
     LOS, EXITP, EXITPC, REJST, JUA, EMPTY,
     ABS, SIGN, ENTIER, SQRT, EXP, LN, END;

   c̲o̲m̲m̲e̲n̲t̲         macro2 identifiers;
   i̲n̲t̲e̲g̲e̲r̲ TRV, TIV, TRC, TIC, TSIC, TBV, TBC, TSTV, TLV, TAK, TSWE,
     STR, STI, SSTI, STB, STST, DOS, DOS2, DOS3,
     JU, JU1, LJU, LJU1, COJU, YCOJU, SUBJ, ISUBJ, DECB, DO,
     TBL, ENTRB, DPTR, INCRB, TDL, ENTRPB, NIL, LAST,
     LAD, TDA, TNA, TAA, SWP, EXITB, EXITC, EXITSV,
     CODE, SLNC, RLNC, LNC;

   c̲o̲m̲m̲e̲n̲t̲         global Booleans;
   B̲o̲o̲l̲e̲a̲n̲ letter last symbol, digit last symbol, arr declarator last symbol,
     type declarator last symbol, in array declaration, in formal list,
     text in memory, own type, int labels, real number, small,
     erroneous, derroneous, wanted;





   c̲o̲m̲m̲e̲n̲t̲         global arrays;
   i̲n̲t̲e̲g̲e̲r̲  a̲r̲r̲a̲y̲ internal representation[0 : 127], word delimiter[0 : 23],
     macro list[0 : 511], tabel[5 : 59],
     instruct list[0 : 203], mask[0 : 9];

   c̲o̲m̲m̲e̲n̲t̲         start of initialization;
   plus:= read;    minus:= read;   mul:= read;     div:= read;
   idi:= read;     ttp:= read;     equ:= read;     uqu:= read;
   les:= read;     mst:= read;     mor:= read;     lst:= read;
   non:= read;     qvl:= read;     imp:= read;     or:= read;
   and:= read;     goto:= read;    for:= read;     step:= read;
   until:= read;   while:= read;   do:= read;      comma:= read;
   period:= read;  ten:= read;     colon:= read;   semicolon:= read;
   colonequal:= read; space sbl:= read; if:= read; then:= read;
   else:= read;    comment:= read; open:= read;    close:= read;
   sub:= read;     bus:= read;     quote:= read;   unquote:= read;
   begin:= read;   end:= read;     own:= read;     rea:= read;
   integ:= read;   boole:= read;   stri:= read;    array:= read;
   proced:= read;  switch:= read;  label:= read;   value:= read;
   true:= read;    false:= read;   new line:= read;
   underlining:= read; bar:= read; lower case:= read;

   STACK:= read;   NEG:= read;     ADD:= read;     SUB:= read;
   MUL:= read;     DIV:= read;     IDI:= read;     TTP:= read;
   EQU:= read;     UQU:= read;     LES:= read;     MST:= read;
   MOR:= read;     LST:= read;     STAB:= read;    NON:= read;
   QVL:= read;     IMP:= read;     OR:= read;      AND:= read;
   STAA:= read;    TSR:= read;     TSI:= read;     TSB:= read;
   TSST:= read;    TFSU:= read;    TSL:= read;     TFSL:= read;
   TCST:= read;    STSR:= read;    STSI:= read;    SSTSI:= read;
   STSB:= read;    STSST:= read;   STFSU:= read;   ENTRIS:= read;
   TFD:= read;     SAS:= read;     DECS:= read;    FAD:= read;
   TASR:= read;    TASI:= read;    TASB:= read;    TASST:= read;
   TASU:= read;    EXITIS:= read;  FADCV:= read;   TRSCV:= read;
   TISCV:= read;   TSCVU:= read;   EXIT:= read;    TEST1:= read;
   TEST2:= read;   CRV:= read;     CIV:= read;     CBV:= read;
   CSTV:= read;    CLV:= read;     CEN:= read;     CLPN:= read;
   TAV:= read;     TIAV:= read;    RAD:= read;     IAD:= read;
   BAD:= read;     STAD:= read;    ORAD:= read;    OIAD:= read;
   OBAD:= read;    OSTAD:= read;   LOS:= read;     EXITP:= read;
   EXITPC:= read;  REJST:= read;   JUA:= read;     EMPTY:= read;
   ABS:= read;     SIGN:= read;    ENTIER:= read;  SQRT:= read;
   EXP:= read;     LN:= read;      END:= read;





   TRV:= read;     TIV:= read;     TRC:= read;      TIC:= read;
   TSIC:= read;    TBV:= read;     TBC:= read;      TSTV:= read;
   TLV:= read;     TAK:= read;     TSWE:= read;     STR:= read;
   STI:= read;     SSTI:= read;    STB:= read;      STST:= read;
   DOS:= read;     DOS2:= read;    DOS3:= read;     JU:= read;
   JU1:= read;     LJU:= read;     LJU1:= read;     COJU:= read;
   YCOJU:= read;   SUBJ:= read;    ISUBJ:= read;    DECB:= read;
   DO:= read;      TBL:= read;     ENTRB:= read;    DPTR:= read;
   INCRB:= read;   TDL:= read;     ENTRPB:= read;   NIL:= read;
   LAST:= read;    LAD:= read;     TDA:= read;      TNA:= read;
   TAA:= read;     SWP:= read;     EXITB:= read;    EXITC:= read;
   EXITSV:= read;  CODE:= read;    SLNC:= read;     RLNC:= read;
   LNC:= read;

   d0 := 1;        d1 := 2;        d2 := 4;         d3 := 8;
   d4 := 16;       d5 := 32;       d6 := 64;        d7 := 128;
   d8 := 256;      d9 := 512;      d10:= 1024;      d11:= 2048;
   d12:= 4096;     d13:= 8192;     d14:= 16384;     d15:= 32768;
   d16:= 65536;    d17:= 131072;   d18:= 262144;    d19:= 524288;
   d20:= 1048576;  d21:= 2097152;  d22:= 4194304;   d23:= 8388608;
   d24:= 16777216; d25:= 33554432;

   re:= 0;         in:= 1;         bo:= 2;          st:= 3;
   ar:= 4;         nondes:= 5;     des:= 6;         un:= 7;
   arbo:= 8;       intlab:= 9;

   function letter:= read; function digit:= read; c variant:= read;

   f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ 127 d̲o̲ internal representation[n]:= read;
   f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲  23 d̲o̲ word delimiter[n]:= read;
   f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ 511 d̲o̲ macro list[n]:= read;
   f̲o̲r̲ n:= 5 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲  59 d̲o̲ tabel[n]:= read;
   f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ 203 d̲o̲ instruct list[n]:= read;
   f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲   9 d̲o̲ mask[n]:= d20 × read;

   end of memory:= read;
   end of list:= instruct list[174];
   text in memory:= true; erroneous:= derroneous:= false;
   wanted:= read = 0;


   b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ space[0 : end of memory];

      p̲r̲o̲c̲e̲d̲u̲r̲e̲ ERRORMESSAGE (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ i;
         erroneous:= true;
         i̲f̲ n = 122 ∨ n = 123 ∨ n = 126 ∨ n = 127 ∨ n = 129
           t̲h̲e̲n̲ derroneous:= true;
         i̲f̲ n ≥ run number
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ NLCR; PRINTTEXT (“er”); print (n);
            print (line counter); print (last symbol);
            f̲o̲r̲ i:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ word count d̲o̲
                 print (space[nl base - last nlp - i])
         e̲n̲d̲
      e̲n̲d̲ ERRORMESSAGE;





      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ next symbol;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ symbol;
         next0:  symbol:= i̲f̲ stock1 ≥ 0 t̲h̲e̲n̲ stock1 e̲l̲s̲e̲ next basic symbol;
         stock1 := -1;
         i̲f̲ (last symbol = semicolon ∨ last symbol = begin) ∧
           symbol = comment
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ skip0: symbol:= next basic symbol;
            i̲f̲ symbol ≠ semicolon t̲h̲e̲n̲ g̲o̲t̲o̲ skip0;
            g̲o̲t̲o̲ next0
         e̲n̲d̲;
         i̲f̲ last symbol = end
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲
            skip1: i̲f̲ symbol ≠ end ∧ symbol ≠ semicolon ∧ symbol ≠ else
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ symbol:= next basic symbol; g̲o̲t̲o̲ skip1 e̲n̲d̲
         e̲n̲d̲
           e̲l̲s̲e̲
         i̲f̲ symbol = 125
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ stock1:= next basic symbol;
            i̲f̲ stock1 > 9 ∧ stock1 < 64
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ skip2: stock1:= next basic symbol;
               i̲f̲ stock1 > 9 ∧ stock1 < 64
                 t̲h̲e̲n̲ g̲o̲t̲o̲ skip2;
               i̲f̲ stock1 = colon
                 t̲h̲e̲n̲ stock1:= next basic symbol
               e̲l̲s̲e̲ ERRORMESSAGE (100);
               i̲f̲ stock1 = open  t̲h̲e̲n̲ stock1:= - stock1
               e̲l̲s̲e̲ ERRORMESSAGE (101);
               symbol:= comma
            e̲n̲d̲
            e̲l̲s̲e̲ symbol:= close
         e̲n̲d̲;
         digit last symbol := symbol < 10 ∨ symbol = period ∨
           symbol = ten;
         letter last symbol:= symbol < 64 ∧ ¬ digit last symbol;
         next symbol:= last symbol:= symbol;
         outsymbol (run number, symbol);
         test pointers
      e̲n̲d̲  next symbol;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  next basic symbol;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  symbol;
         next0:  insymbol (run number, symbol);
         i̲f̲ symbol = new line
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ line counter:= line counter + 1;
            i̲f̲ quote counter = 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ outsymbol (run number, symbol);
               g̲o̲t̲o̲ next0
            e̲n̲d̲
         e̲n̲d̲;
         next basic symbol:= symbol
      e̲n̲d̲  next basic symbol;







      p̲r̲o̲c̲e̲d̲u̲r̲e̲  insymbol (source, destination); i̲n̲t̲e̲g̲e̲r̲  source, destination;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  symbol, i;
         i̲f̲ (source = 200 ∨ source = 300) ∧ text in memory
           t̲h̲e̲n̲
         b̲e̲g̲i̲n̲ destination:= bit string(d8 × shift, shift,
              space[text base + text pointer]);
            i̲f̲ shift < 257
              t̲h̲e̲n̲ shift:= d8 × shift
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ shift:= 1; text pointer:= text pointer + 1 e̲n̲d̲
         e̲n̲d̲
         e̲l̲s̲e̲
         b̲e̲g̲i̲n̲ symbol:= i̲f̲ stock > 0 t̲h̲e̲n̲ stock e̲l̲s̲e̲ next tape symbol;
            stock:= - 1;
            i̲f̲ symbol > bus
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲f̲ symbol = 123 t̲h̲e̲n̲ symbol:= space sbl;
               i̲f̲ quote counter > 0
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ i̲f̲ symbol = bar
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ next0: stock:= next tape symbol;
                     i̲f̲ stock = bar t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
                     i̲f̲ stock = les
                       t̲h̲e̲n̲ quote counter:= quote counter + 1
                       e̲l̲s̲e̲
                     i̲f̲ stock = mor
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ i̲f̲ quote counter = 1
                          t̲h̲e̲n̲ b̲e̲g̲i̲n̲ symbol:= unquote;
                           stock:= - symbol
                        e̲n̲d̲
                        e̲l̲s̲e̲ quote counter:=
                          quote counter - 1
                     e̲n̲d̲
                  e̲n̲d̲
                    e̲l̲s̲e̲ i̲f̲ symbol = 124
                    t̲h̲e̲n̲ symbol:= colon
                    e̲l̲s̲e̲ i̲f̲ symbol = 125 t̲h̲e̲n̲ symbol:= close
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ symbol ≥ newline
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ i̲f̲ symbol = bar
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ next1: symbol:= next tape symbol;
                     i̲f̲ symbol = bar t̲h̲e̲n̲ g̲o̲t̲o̲ next1;
                     symbol:= i̲f̲ symbol = and t̲h̲e̲n̲ ttp e̲l̲s̲e̲
                       i̲f̲ symbol = equ t̲h̲e̲n̲ uqu e̲l̲s̲e̲
                       i̲f̲ symbol = les t̲h̲e̲n̲ quote e̲l̲s̲e̲
                       i̲f̲ symbol = mor t̲h̲e̲n̲ unquote
                     e̲l̲s̲e̲ 160
                  e̲n̲d̲
                    e̲l̲s̲e̲
                  i̲f̲ symbol = underlining
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ symbol:= the underlined symbol;
                     i̲f̲ symbol > 63
                       t̲h̲e̲n̲ symbol:=
                       i̲f̲ symbol = 124 t̲h̲e̲n̲ idi e̲l̲s̲e̲
                       i̲f̲ symbol = les t̲h̲e̲n̲ mst e̲l̲s̲e̲
                       i̲f̲ symbol = mor t̲h̲e̲n̲ lst e̲l̲s̲e̲
                       i̲f̲ symbol = non t̲h̲e̲n̲ imp e̲l̲s̲e̲
                       i̲f̲ symbol = equ t̲h̲e̲n̲ qvl
                     e̲l̲s̲e̲ 161
                     e̲l̲s̲e̲
                     b̲e̲g̲i̲n̲ stock:= next tape symbol;
                        i̲f̲ stock = underlining
                          t̲h̲e̲n̲
                        b̲e̲g̲i̲n̲
                           symbol:= the underlined symbol +
                             d7 × symbol;
                           f̲o̲r̲ i:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ 23 d̲o̲
                              b̲e̲g̲i̲n̲
                                 i̲f̲ word delimiter[i] ÷ d7 = symbol
                                   t̲h̲e̲n̲
                                 b̲e̲g̲i̲n̲
                                    symbol:= word delimiter[i];
                                    symbol:= symbol -
                                      symbol ÷ d7 × d7;
                                    g̲o̲t̲o̲ next2
                                 e̲n̲d̲
                              e̲n̲d̲;
                           symbol:= 162;
                           next2: stock:= next tape symbol;
                           i̲f̲ stock = underlining
                             t̲h̲e̲n̲
                           b̲e̲g̲i̲n̲ the underlined symbol;
                              g̲o̲t̲o̲ next2
                           e̲n̲d̲
                        e̲n̲d̲
                        e̲l̲s̲e̲ symbol:= 161
                     e̲n̲d̲
                  e̲n̲d̲
                    e̲l̲s̲e̲
                  i̲f̲ symbol = 124
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ stock:= next tape symbol;
                     i̲f̲ stock = equ
                       t̲h̲e̲n̲ b̲e̲g̲i̲n̲ symbol:= colonequal;
                        stock:= - symbol
                     e̲n̲d̲
                     e̲l̲s̲e̲ symbol:= colon
                  e̲n̲d̲
               e̲n̲d̲
               e̲l̲s̲e̲ insymbol (runnumber, symbol)
            e̲n̲d̲;
            destination:= symbol
         e̲n̲d̲
      e̲n̲d̲  insymbol;





      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  the underlined symbol;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  symbol;
         symbol:= next tape symbol;
         the underlined symbol:= i̲f̲ symbol = underlining
           t̲h̲e̲n̲ the underlined symbol
         e̲l̲s̲e̲ symbol
      e̲n̲d̲  the underlined symbol;

      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  next tape symbol;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  symbol, head;
         symbol:= internal representation[REHEP];
         i̲f̲ symbol > 0
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ head:= symbol ÷ d8;
            next tape symbol:= abs (i̲f̲ case = lower case
              t̲h̲e̲n̲ symbol - d8 × head
            e̲l̲s̲e̲ head)
         e̲n̲d̲
         e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ symbol < - 2 t̲h̲e̲n̲ case:= - symbol e̲l̲s̲e̲
            i̲f̲ symbol =   0 t̲h̲e̲n̲ ERRORMESSAGE (102) e̲l̲s̲e̲
            i̲f̲ symbol = - 1 t̲h̲e̲n̲ ERRORMESSAGE (103);
            next tape symbol:= next tape symbol
         e̲n̲d̲
      e̲n̲d̲  next tape symbol;

      p̲r̲o̲c̲e̲d̲u̲r̲e̲  outsymbol (destination, source); i̲n̲t̲e̲g̲e̲r̲ destination, source;
      b̲e̲g̲i̲n̲   i̲f̲ destination = 100 ∧ text in memory
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ space[text base + text pointer]:=
              space[text base + text pointer] + shift × source;
            i̲f̲ shift < 257
              t̲h̲e̲n̲ shift:= d8 × shift
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ shift:= 1; text pointer:= text pointer + 1;
               space[text base + text pointer]:= 0
            e̲n̲d̲
         e̲n̲d̲
      e̲n̲d̲  outsymbol;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  arithoperator last symbol;
      b̲e̲g̲i̲n̲   arithoperator last symbol:= last symbol = plus  ∨
           last symbol = minus ∨
           last symbol = mul   ∨
           last symbol = div   ∨
           last symbol = idi   ∨
           last symbol = ttp
      e̲n̲d̲  arithoperator last symbol;






      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  relatoperator last symbol;
      b̲e̲g̲i̲n̲   relatoperator last symbol:= last symbol = les ∨
           last symbol = mst ∨
           last symbol = equ ∨
           last symbol = lst ∨
           last symbol = mor ∨
           last symbol = uqu
      e̲n̲d̲  relatoperator last symbol;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  booloperator last symbol;
      b̲e̲g̲i̲n̲   booloperator last symbol:= last symbol = qvl ∨
           last symbol = imp ∨
           last symbol = or  ∨
           last symbol = and
      e̲n̲d̲  booloperator last symbol;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  declarator last symbol;
      b̲e̲g̲i̲n̲   own type:= last symbol = own; i̲f̲  own type t̲h̲e̲n̲  next symbol;
         type:= i̲f̲ last symbol = rea   t̲h̲e̲n̲ 0 e̲l̲s̲e̲
           i̲f̲ last symbol = integ t̲h̲e̲n̲ 1 e̲l̲s̲e̲
           i̲f̲ last symbol = boole t̲h̲e̲n̲ 2 e̲l̲s̲e̲
           i̲f̲ last symbol = stri  t̲h̲e̲n̲ 3 e̲l̲s̲e̲ 1000;
         i̲f̲ type < 4 t̲h̲e̲n̲ next symbol
         e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ own type t̲h̲e̲n̲  ERRORMESSAGE (104);
            i̲f̲ last symbol = array t̲h̲e̲n̲  type:= 0
         e̲n̲d̲;
         arr declarator last symbol:= last symbol = array;
         i̲f̲ arr declarator last symbol ∧ run number = 300
           t̲h̲e̲n̲ arr decla macro:= i̲f̲ own type
           t̲h̲e̲n̲ (i̲f̲ type = 0 t̲h̲e̲n̲ ORAD e̲l̲s̲e̲
           i̲f̲ type = 1 t̲h̲e̲n̲ OIAD e̲l̲s̲e̲
           i̲f̲ type = 2 t̲h̲e̲n̲ OBAD e̲l̲s̲e̲ OSTAD)
         e̲l̲s̲e̲ (i̲f̲ type = 0 t̲h̲e̲n̲ RAD e̲l̲s̲e̲
           i̲f̲ type = 1 t̲h̲e̲n̲ IAD e̲l̲s̲e̲
           i̲f̲ type = 2 t̲h̲e̲n̲ BAD e̲l̲s̲e̲ STAD);
         chara:= i̲f̲ arr declarator last symbol
           t̲h̲e̲n̲ 8
         e̲l̲s̲e̲ i̲f̲ last symbol = switch
           t̲h̲e̲n̲ 14
         e̲l̲s̲e̲ i̲f̲ last symbol = proced
           t̲h̲e̲n̲ (i̲f̲ type < 4 t̲h̲e̲n̲ 16 e̲l̲s̲e̲ 24)
         e̲l̲s̲e̲ type;
         type declarator last symbol:= chara < 4;
         i̲f̲ own type ∧ chara > 8 t̲h̲e̲n̲ ERRORMESSAGE (105);
         i̲f̲ type < 4 ∧ last symbol = switch t̲h̲e̲n̲ ERRORMESSAGE (106);
         i̲f̲ chara < 25 ∧ run number = 100
           t̲h̲e̲n̲ character:= ((i̲f̲ type declarator last symbol
           t̲h̲e̲n̲ type
         e̲l̲s̲e̲ i̲f̲ type < 4
           t̲h̲e̲n̲ type + chara
         e̲l̲s̲e̲ chara) +
           (i̲f̲ own type t̲h̲e̲n̲ 32 e̲l̲s̲e̲ 0)) × d19;
         declarator last symbol:= chara < 25
      e̲n̲d̲  declarator last symbol;






      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  specifier last symbol;
      b̲e̲g̲i̲n̲   type:= i̲f̲ last symbol = rea   t̲h̲e̲n̲ 0 e̲l̲s̲e̲
           i̲f̲ last symbol = integ t̲h̲e̲n̲ 1 e̲l̲s̲e̲
           i̲f̲ last symbol = boole t̲h̲e̲n̲ 2 e̲l̲s̲e̲
           i̲f̲ last symbol = stri  t̲h̲e̲n̲ 3 e̲l̲s̲e̲
           i̲f̲ last symbol = array t̲h̲e̲n̲ 5 e̲l̲s̲e̲ 1000;
         i̲f̲ type < 4 t̲h̲e̲n̲ next symbol;
         chara:= i̲f̲ last symbol = label  t̲h̲e̲n̲ 6 e̲l̲s̲e̲
           i̲f̲ last symbol = switch t̲h̲e̲n̲ 14 e̲l̲s̲e̲ 1000;
         i̲f̲ type + chara < 1000 t̲h̲e̲n̲ ERRORMESSAGE(107);
         chara:= i̲f̲ last symbol = array  t̲h̲e̲n̲ 8 e̲l̲s̲e̲
           i̲f̲ last symbol = proced t̲h̲e̲n̲ (i̲f̲ type < 4 t̲h̲e̲n̲ 16
         e̲l̲s̲e̲ 24)
         e̲l̲s̲e̲ chara;
         i̲f̲ chara < 25 t̲h̲e̲n̲ next symbol;
         i̲f̲ chara + type < 2000 ∧ run number = 100
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ value character:= (i̲f̲ chara > 8 t̲h̲e̲n̲ type e̲l̲s̲e̲
              i̲f̲ chara = 6 t̲h̲e̲n̲    6 e̲l̲s̲e̲
              i̲f̲  type = 5 t̲h̲e̲n̲    8
            e̲l̲s̲e̲ type + chara) + 64;
            character:= ((i̲f̲ type > 5
              t̲h̲e̲n̲ chara
            e̲l̲s̲e̲ (i̲f̲ type > 1 t̲h̲e̲n̲ type e̲l̲s̲e̲ 4) +
              (i̲f̲ chara < 1000 t̲h̲e̲n̲ chara
            e̲l̲s̲e̲ 0))
              + 96) × d19
         e̲n̲d̲;
         specifier last symbol:= chara + type < 2000
      e̲n̲d̲  specifier last symbol;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  operator last symbol;
      b̲e̲g̲i̲n̲   operator last symbol:= arithoperator last symbol ∨
           relatoperator last symbol ∨
           booloperator last symbol
      e̲n̲d̲  operator last symbol;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲  unsigned number;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  sign of exponent;
         i̲f̲ last symbol < 10
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ value of constant:= unsigned integer (0);
            real number:= digit last symbol
         e̲n̲d̲
         e̲l̲s̲e̲ b̲e̲g̲i̲n̲ value of constant:= i̲f̲ last symbol = ten t̲h̲e̲n̲ 1
            e̲l̲s̲e̲ 0;
            real number:= true
         e̲n̲d̲;
         decimal exponent:= 0;
         i̲f̲ real number
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲
            next0: i̲f̲ last symbol < 10
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ decimal exponent:= decimal exponent + 1;
               next symbol; g̲o̲t̲o̲ next0
            e̲n̲d̲;
            i̲f̲ last symbol = period
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
               value of constant:=
                 unsigned integer (value of constant);
               decimal exponent:= decimal exponent -
                 decimal count;
               next1: i̲f̲ last symbol < 10
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; g̲o̲t̲o̲ next1 e̲n̲d̲
            e̲n̲d̲;
            i̲f̲ last symbol = ten
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; sign of exponent:= 1;
               i̲f̲ last symbol = plus
                 t̲h̲e̲n̲ next symbol
                 e̲l̲s̲e̲ i̲f̲ last symbol = minus
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
                  sign of exponent:= - 1
               e̲n̲d̲;
               decimal exponent:= decimal exponent +
                 sign of exponent ×
                 unsigned integer (0);
               i̲f̲ last symbol < 10
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  ERRORMESSAGE (108);
                  next2: i̲f̲ next symbol < 9
                    t̲h̲e̲n̲ g̲o̲t̲o̲ next2
               e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲;
         small:= value of constant < d15 ∧ ¬ real number
      e̲n̲d̲  unsigned number;






      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  unsigned integer (start); i̲n̲t̲e̲g̲e̲r̲ start;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word;
         word:= start; decimal count:= 0;
         i̲f̲ last symbol > 9 t̲h̲e̲n̲ ERRORMESSAGE (109);
         next0:  i̲f̲ last symbol < 10
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ word < 6710886 ∨ (word = 6710886 ∧ last symbol < 4)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ word:= 10 × word + last symbol;
               decimal count:= decimal count + 1;
               next symbol; g̲o̲t̲o̲ next0
            e̲n̲d̲
         e̲n̲d̲;
         unsigned integer:= word
      e̲n̲d̲  unsigned integer;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  read identifier;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word, count;
         word:= count:= word count:= 0;
         i̲f̲ letter last symbol
           t̲h̲e̲n̲
         b̲e̲g̲i̲n̲
            next0: i̲f̲ last symbol < 64
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲f̲ count = 4
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ word count:= word count + 1;
                  word:= count:= 0
               e̲n̲d̲;
               word:= space[nl base - nlp - word count]:=
                 d6 × word - last symbol - 1;
               count:= count + 1; next symbol; g̲o̲t̲o̲ next0
            e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲ last identifier:= space[nl base - nlp];
               last identifierl:= i̲f̲ word count = 0
                 t̲h̲e̲n̲ 0
               e̲l̲s̲e̲ space[nl base - nlp - 1]
            e̲n̲d̲
         e̲n̲d̲
         e̲l̲s̲e̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (110); space[nl base - nlp]:= - 1 e̲n̲d̲;
         space[nl base - nlp - word count - 1]:= 127 × d19
      e̲n̲d̲  read identifier;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  next pointer (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word, pointer;
         pointer:= n;
         next0:  word:= - space[nl base - pointer];
         i̲f̲ word ≤   0 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ pointer:= pointer + 1; g̲o̲t̲o̲ next0 e̲n̲d̲;
         i̲f̲ word ≥ d25 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ pointer:= word - word ÷ d13 × d13;
            g̲o̲t̲o̲ next0
         e̲n̲d̲;
         next pointer:= pointer
      e̲n̲d̲  next pointer;






      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  look up;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  count, pointer;
         pointer:= block cell pointer +
           (i̲f̲ in formal list ∨ in array declaration
           t̲h̲e̲n̲ 5 e̲l̲s̲e̲ 4);
         next0:  pointer:= next pointer (pointer);
         f̲o̲r̲ count:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ word count d̲o̲
            b̲e̲g̲i̲n̲ i̲f̲ space[nl base - pointer - count] ≠
                 space[nl base - last nlp - count]
                 t̲h̲e̲n̲ g̲o̲t̲o̲ next1
            e̲n̲d̲;
         pointer:= pointer + word count + 1;
         i̲f̲ space[nl base - pointer] < 0
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next1: pointer:= pointer + 1;
            g̲o̲t̲o̲ i̲f̲ space[nl base - pointer] < 0 t̲h̲e̲n̲ next1
            e̲l̲s̲e̲ next0
         e̲n̲d̲;
         look up:= pointer
      e̲n̲d̲  look up;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  in name list;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ head;
         i̲f̲ real number ∨ ¬ int labels
           t̲h̲e̲n̲ in name list:= false
         e̲l̲s̲e̲ b̲e̲g̲i̲n̲ head:= value of constant ÷ d18;
            space[nl base - nlp]:= - d12 - head;
            space[nl base - nlp - 1]:=
              (head - 1) × d18 - value of constant;
            word count:= 1;
            space[nl base - nlp - 2]:= 6 × d19;
            last nlp:= nlp; integer label:= look up;
            in name list:= integer label < nlp
         e̲n̲d̲
      e̲n̲d̲  in name list;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  next identifier (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  pointer;
         pointer:= next pointer (n) + 1;
         next0:  i̲f̲ space[nl base - pointer] < 0
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ pointer:= pointer + 1; g̲o̲t̲o̲ next0 e̲n̲d̲;
         next identifier:= pointer
      e̲n̲d̲  next identifier;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲  skip identifier;
      b̲e̲g̲i̲n̲   i̲f̲ last symbol < 64 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; skip identifier e̲n̲d̲
      e̲n̲d̲  skip identifier;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  skip type declaration;
      b̲e̲g̲i̲n̲   i̲f̲ letter last symbol t̲h̲e̲n̲ skip identifier;
         i̲f̲ last symbol = comma
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; skip type declaration e̲n̲d̲
      e̲n̲d̲  skip type declaration;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  skip value list;
      b̲e̲g̲i̲n̲   i̲f̲ last symbol = value
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; skip type declaration;
            i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
         e̲n̲d̲
      e̲n̲d̲  skip value list;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  skip specification list;
      b̲e̲g̲i̲n̲   i̲f̲ specifier last symbol
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ skip type declaration;
            i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol;
            skip specification list
         e̲n̲d̲
      e̲n̲d̲  skip specification list;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲ skip string;
      b̲e̲g̲i̲n̲   quote counter:= 1;
         next0:  i̲f̲ next symbol ≠ unquote t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
         quote counter:= 0
      e̲n̲d̲  skip string;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲ skip rest of statement (pr); p̲r̲o̲c̲e̲d̲u̲r̲e̲ pr;
      b̲e̲g̲i̲n̲   i̲f̲ last symbol = do
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; pr e̲n̲d̲
           e̲l̲s̲e̲
         i̲f̲ last symbol = goto ∨ last symbol = for ∨
           last symbol = begin
           t̲h̲e̲n̲ pr;
         i̲f̲ last symbol = quote t̲h̲e̲n̲ skip string;
         i̲f̲ last symbol ≠ semicolon ∧ last symbol ≠ end
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
            skip rest of statement (pr)
         e̲n̲d̲
      e̲n̲d̲  skip rest of statement;






      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ bit string (kn, n, code word); i̲n̲t̲e̲g̲e̲r̲ kn,n,code word;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  k;
         k:= code word ÷ kn; bit string:= (code word - k × kn) ÷ n
      e̲n̲d̲  bit string;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  display level;
      b̲e̲g̲i̲n̲   display level:=
           bit string (d6, d0, space[nl base - block cell pointer - 1])
      e̲n̲d̲  display level;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  top of display;
      b̲e̲g̲i̲n̲   top of display:=
           bit string (d13, d6, space[nl base - block cell pointer - 1])
      e̲n̲d̲  top of display;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  local space;
      b̲e̲g̲i̲n̲   local space:= space[nl base - block cell pointer - 1] ÷ d13
      e̲n̲d̲  local space;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  proc level;
      b̲e̲g̲i̲n̲   proc level:=
           bit string (d6, d0, space[nl base - block cell pointer - 2])
      e̲n̲d̲  proc level;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  use of counter stack;
      b̲e̲g̲i̲n̲   use of counter stack:=
           bit string (d7, d6, space[nl base - block cell pointer - 2]) = 1
      e̲n̲d̲  use of counter stack;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  status;
      b̲e̲g̲i̲n̲   status:= space[nl base - block cell pointer - 2] ÷ d13
      e̲n̲d̲ status;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  in code (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   in code:= bit string (d25, d24, space[nl base - n - 1]) = 1
      e̲n̲d̲  in code;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  type bits (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   type bits:= bit string (d22, d19, space[nl base - n])
      e̲n̲d̲ type bits;






      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  local label (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   local label:=
           nonformal label (n) ∧
           bit string(d6, d0,
           space[nl base - corresponding block cell pointer (n) - 1]) =
           display level
      e̲n̲d̲  local label;


      B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  nonformal label (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   nonformal label:= space[nl base - n] ÷ d19 = 6
      e̲n̲d̲ nonformal label;


      i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  corresponding block cell pointer (n); i̲n̲t̲e̲g̲e̲r̲ n;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ p;
         p:= block cell pointer;
         next0:  i̲f̲ n < p ∨ (n > space[nl base - p - 2] ÷ d13 ∧ p > 0)
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ p:= space[nl base - p] ÷ d13; g̲o̲t̲o̲ next0 e̲n̲d̲;
         corresponding block cell pointer:= p
      e̲n̲d̲  corresponding block cell pointer;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  entrance block;
      b̲e̲g̲i̲n̲   block cell pointer:= next block cell pointer;
         next block cell pointer:=
           bit string (d13, d0, space[nl base - block cell pointer])
      e̲n̲d̲  entrance block;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  exit block;
      b̲e̲g̲i̲n̲   block cell pointer:= space[nl base - block cell pointer] ÷ d13
      e̲n̲d̲  exit block;


      p̲r̲o̲c̲e̲d̲u̲r̲e̲  init;
      b̲e̲g̲i̲n̲   stock:= stock1:= last symbol:= word count:= - 1;
         shift:= 1;
         line counter:= quote counter:= for count:= 0;
         in formal list:= in array declaration:= false;
         case:= lower case; text pointer:= 0
      e̲n̲d̲  init;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲ test pointers;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ fprog, fnl, i, shift;
         i̲f̲ text in memory
           t̲h̲e̲n̲
         b̲e̲g̲i̲n̲ fprog:= text base +
              (i̲f̲ runnumber = 300 t̲h̲e̲n̲ text pointer e̲l̲s̲e̲ 0) -
              instruct counter;
            fnl:= nl base - nlp -
              (text base +
              (i̲f̲ runnumber = 100 t̲h̲e̲n̲ text pointer
            e̲l̲s̲e̲ end of text));
            i̲f̲ fprog + fnl < 40
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ text in memory:= false; test pointers e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ fprog < 20
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ shift:= (fnl - fprog) ÷ 2;
               f̲o̲r̲ i:= text base + text pointer
                 s̲t̲e̲p̲ - 1 u̲n̲t̲i̲l̲ text base d̲o̲
                    space[i + shift]:= space[i];
               text base:= text base + shift
            e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ fnl < 20
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ shift:= (fprog - fnl) ÷ 2;
               f̲o̲r̲ i:= text base s̲t̲e̲p̲ 1
                 u̲n̲t̲i̲l̲ text base + text pointer d̲o̲
                    space[i]:= space[i + shift];
               text base:= text base - shift
            e̲n̲d̲
         e̲n̲d̲
           e̲l̲s̲e̲ i̲f̲ nl base - nlp - instruct counter < 20
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (492); g̲o̲t̲o̲ endrun e̲n̲d̲
      e̲n̲d̲  test pointers;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲ prescan0;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ old block cell pointer, displ level, prc level,
           global count, local count, label count, local for count,
           max for count, internal block depth, string occurrence,
           subcount, array pointer;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Program;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n;
            character:= 6 × d19;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ read identifier;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Process identifier;
                  Label declaration (n)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (111);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ last symbol = colon t̲h̲e̲n̲ Int lab declaration
               e̲l̲s̲e̲ ERRORMESSAGE (112);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = begin
              t̲h̲e̲n̲ Begin statement
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (113); next symbol; Program e̲n̲d̲
         e̲n̲d̲  Program;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Block (proc identifier); i̲n̲t̲e̲g̲e̲r̲  proc identifier;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  dump1, dump2, dump3, dump4, dump5, dump6, dump7, dump8,
              n, formal count;
            dump1:= block cell pointer; dump2:= local for count;
            dump3:= max for count;      dump4:= local count;
            dump5:= label count;        dump6:= internal block depth;
            dump7:= string occurrence;  dump8:= prc level;
            local for count:= max for count:= local count:= label count:=
              internal block depth:= string occurrence:= 0;
            block cell pointer:= nlp + 1;
            space[nl base - old block cell pointer]:=
              space[nl base - old block cell pointer] + block cell pointer;
            old block cell pointer:= block cell pointer;
            space[nl base - block cell pointer]:= dump1 × d13;
            space[nl base - block cell pointer - 1]:= displ level:=
              displ level + 1;
            space[nl base - block cell pointer - 3]:= 0;
            nlp:= nlp + 6;




            i̲f̲ proc identifier > 0
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ prc level:= displ level; formal count:= 0;
               space[nl base - block cell pointer - 4]:= - d25 - nlp;
               i̲f̲ last symbol = open
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  character:= 127 × d19;
                  next0: next symbol; Identifier;
                  space[nl base - nlp]:= 0; nlp:= nlp + 1;
                  formal count:= formal count + 1;
                  i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
                  i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
                  e̲l̲s̲e̲ ERRORMESSAGE (114)
               e̲n̲d̲;
               i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (115);
               space[nl base - proc identifier - 1]:=
                 d22 + formal count + 1 ;
               i̲f̲ last symbol = value
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲
                  next1: next symbol; n:= Identifier;
                  i̲f̲ n > last nlp  t̲h̲e̲n̲ ERRORMESSAGE (116)
                  e̲l̲s̲e̲ space[nl base - n]:= 95 × d19;
                  nlp:= last nlp;
                  i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next1;
                  i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
                  e̲l̲s̲e̲ ERRORMESSAGE (117)
               e̲n̲d̲;
               next2: i̲f̲ specifier last symbol
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲
                  next3: n:= Identifier;
                  i̲f̲ n > last nlp
                    t̲h̲e̲n̲ ERRORMESSAGE (118)
                    e̲l̲s̲e̲ i̲f̲ space[nl base - n] = 127 × d19
                    t̲h̲e̲n̲ space[nl base - n]:= character
                    e̲l̲s̲e̲ i̲f̲ space[nl base - n] ≠  95 × d19
                    t̲h̲e̲n̲ ERRORMESSAGE (119)
                    e̲l̲s̲e̲ i̲f̲ value character > 75
                    t̲h̲e̲n̲ ERRORMESSAGE (120)
                  e̲l̲s̲e̲
                  b̲e̲g̲i̲n̲ space[nl base - n]:=
                       value character × d19;
                     i̲f̲ type = 3
                       t̲h̲e̲n̲ string occurrence:= d6
                  e̲n̲d̲;
                  nlp:= last nlp;
                  i̲f̲ last symbol = comma
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; g̲o̲t̲o̲ next3 e̲n̲d̲;
                  i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
                  e̲l̲s̲e̲ ERRORMESSAGE (121);
                  g̲o̲t̲o̲ next2
               e̲n̲d̲;




               space[nl base - nlp]:= - d25 - 4 - dump1; nlp:= nlp + 1;
               space[nl base - block cell pointer - 4]:= - d25 - nlp;
               i̲f̲ last symbol = quote
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  space[nl base - proc identifier - 1]:=
                    space[nl base - proc identifier - 1] + d24;
                  next4: next symbol;
                  i̲f̲ last symbol ≠ unquote t̲h̲e̲n̲ g̲o̲t̲o̲ next4;
                  next symbol
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = begin
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
                  i̲f̲ declarator last symbol t̲h̲e̲n̲ Declaration list;
                  Compound tail; next symbol
               e̲n̲d̲
               e̲l̲s̲e̲ Statement
            e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲ space[nl base - nlp]:= - d25 - 4 - dump1; nlp:= nlp + 1;
               space[nl base - block cell pointer - 4]:= - d25 - nlp;
               Declaration list; Compound tail
            e̲n̲d̲;

            space[nl base - block cell pointer - 2]:=
              d13 × nlp + string occurrence + prc level;
            f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ max for count - 1 d̲o̲
                 space[nl base - nlp - 1]:= d19;
            space[nl base - block cell pointer - 1]:=
              space[nl base - block cell pointer - 1] +
              d6 × (internal block depth + 1);
            i̲f̲ prc level > 1
              t̲h̲e̲n̲ space[nl base - block cell pointer - 1]:=
              space[nl base - block cell pointer - 1] +
              d13 × (max for count + local count)
            e̲l̲s̲e̲ global count:= global count + max for count +
              local count + label count;
            nlp:= nlp + max for count;
            space[nl base - nlp]:= - d25 - 5 - block cell pointer;
            nlp:= nlp + 1;
            space[nl base - block cell pointer + 1]:= - d25 - nlp;
            displ level:= space[nl base - dump1 - 1];
            Block:= internal block depth + 1;
            block cell pointer:= dump1; local for count:= dump2;
            max for count:= dump3;      local count:= dump4;
            label count:= dump5;        internal block depth:= dump6;
            string occurrence:= dump7;  prc level:= dump8
         e̲n̲d̲  Block;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Compound tail;
         b̲e̲g̲i̲n̲   Statement; i̲f̲  last symbol = semicolon
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Compound tail e̲n̲d̲
         e̲n̲d̲  Compound tail;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Declaration list;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, count;
            next0:  i̲f̲ type declarator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  count:= 0;
               next1: count:= count + 1;
               n:= Identifier;
               i̲f̲ n < last nlp t̲h̲e̲n̲ ERRORMESSAGE (122);
               i̲f̲ last symbol = comma
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; g̲o̲t̲o̲ next1 e̲n̲d̲;
               i̲f̲ type = 0 ∨ type = 3 t̲h̲e̲n̲ count:= 2 × count;
               i̲f̲ own type t̲h̲e̲n̲ global count:= global count + count
               e̲l̲s̲e̲ local count:= local count + count;
               i̲f̲ type = 3 t̲h̲e̲n̲ string occurrence:= d6
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ arr declarator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  count:= array pointer:= 0;
               next2:  count:= count + 1;
               next symbol; n:= Identifier;
               i̲f̲ n < last nlp t̲h̲e̲n̲ ERRORMESSAGE (123);
               space[nl base - nlp]:= array pointer;
               array pointer:= nlp; nlp:= nlp + 1;
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next2;
               dimension:= 0;
               i̲f̲ last symbol = sub
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲  subcount:= 1;
                  next3: next symbol;
                  i̲f̲ letter last symbol
                    t̲h̲e̲n̲ skip identifier
                    e̲l̲s̲e̲ i̲f̲ digit last symbol
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
                     Store numerical constant
                  e̲n̲d̲;
                  i̲f̲ last symbol = quote t̲h̲e̲n̲ skip string;
                  i̲f̲ last symbol = colon
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ dimension:= dimension + 1;
                     g̲o̲t̲o̲ next3
                  e̲n̲d̲;
                  i̲f̲ last symbol = sub
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ subcount:= subcount + 1;
                     g̲o̲t̲o̲ next3
                  e̲n̲d̲;
                  i̲f̲ last symbol ≠ bus t̲h̲e̲n̲ g̲o̲t̲o̲ next3;
                  i̲f̲ subcount > 1
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ subcount:= subcount - 1;
                     g̲o̲t̲o̲ next3
                  e̲n̲d̲;
                  next symbol;
                  i̲f̲ dimension = 0 t̲h̲e̲n̲ ERRORMESSAGE (124)
                  e̲l̲s̲e̲ dimension:= dimension + 1
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (125);




               next4: n:= space[nl base - array pointer];
               space[nl base - array pointer]:= dimension;
               array pointer:= n;
               i̲f̲ n ≠ 0 t̲h̲e̲n̲ g̲o̲t̲o̲ next4;
               i̲f̲ own type
                 t̲h̲e̲n̲ global count:=
                 global count + (3 × dimension + 3) × count
               e̲l̲s̲e̲ local count:= local count + count;
               i̲f̲ last symbol = comma
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ count:= 0; g̲o̲t̲o̲ next2 e̲n̲d̲;
               i̲f̲ type = 3 t̲h̲e̲n̲ string occurrence:= d6
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = switch
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; n:= Identifier;
               i̲f̲ n < last nlp t̲h̲e̲n̲ ERRORMESSAGE (126);
               space[nl base - nlp]:= 0; nlp:= nlp + 1;
               next5: next symbol;
               i̲f̲ letter last symbol
                 t̲h̲e̲n̲ skip identifier
                 e̲l̲s̲e̲ i̲f̲ digit last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
                  Store numerical constant
               e̲n̲d̲;
               i̲f̲ last symbol = quote t̲h̲e̲n̲ skip string;
               i̲f̲ last symbol ≠ semicolon t̲h̲e̲n̲ g̲o̲t̲o̲ next5
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ next symbol; n:= Identifier;
               i̲f̲ n < last nlp t̲h̲e̲n̲ ERRORMESSAGE (127);
               nlp:= nlp + 1;
               i̲f̲ type < 4
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ space[nl base - nlp]:= type × d19;
                  nlp:= nlp + 1
               e̲n̲d̲;
               Block (n)
            e̲n̲d̲;
            i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
            e̲l̲s̲e̲ ERRORMESSAGE (128);
            i̲f̲ declarator last symbol t̲h̲e̲n̲ g̲o̲t̲o̲ next0
         e̲n̲d̲  Deciaration list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Statement;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, lfc;
            lfc:= local for count;
            next0:  character:= 6 × d19;
            next1:  i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ read identifier;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Process identifier;
                  Label declaration (n);
                  g̲o̲t̲o̲ next1
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Int lab declaration; g̲o̲t̲o̲ next1 e̲n̲d̲
               e̲l̲s̲e̲ Store numerical constant
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = for
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ local for count:= local for count + 1;
               i̲f̲ local for count > max for count
                 t̲h̲e̲n̲ max for count:= local for count
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = begin
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Begin statement; next symbol; g̲o̲t̲o̲ next1 e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = quote t̲h̲e̲n̲ skip string;
            i̲f̲ last symbol ≠ semicolon ∧ last symbol ≠ end
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; g̲o̲t̲o̲ next1 e̲n̲d̲;
            local for count:= lfc
         e̲n̲d̲  Statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Label declaration (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲f̲ n < last nlp t̲h̲e̲n̲ ERRORMESSAGE (129);
            i̲f̲ label count = 0
              t̲h̲e̲n̲ space[nl base - block cell pointer - 3]:= d13 × (nlp - 1);
            label count:= label count + 2;
            space[nl base - nlp]:= d18; nlp:= nlp + 1;
            next symbol
         e̲n̲d̲  Label declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Int lab declaration;
         b̲e̲g̲i̲n̲   i̲f̲ real number
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (130); next symbol e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ int labels:= true;
               in name list; nlp:= nlp + 3;
               Label declaration (integer label)
            e̲n̲d̲
         e̲n̲d̲  Int lab declaration;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Begin statement;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            next symbol;
            i̲f̲ declarator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Block (0);
               i̲f̲ n > internal block depth
                 t̲h̲e̲n̲ internal block depth:= n
            e̲n̲d̲
            e̲l̲s̲e̲ Compound tail
         e̲n̲d̲  Begin statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Store numerical constant;
         b̲e̲g̲i̲n̲   i̲f̲ ¬ small
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ space[prog base + instruct counter]:=
                 value of constant;
               space[prog base + instruct counter + 1]:=
                 decimal exponent;
               instruct counter:= instruct counter + 2
            e̲n̲d̲
         e̲n̲d̲  Store numerical constant;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Process identifier;
         b̲e̲g̲i̲n̲   last nlp:= nlp; nlp:= nlp + word count + 2;
            space[nl base - nlp + 1]:= character;
            Process identifier:= look up
         e̲n̲d̲  Process identifier;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Identifier;
         b̲e̲g̲i̲n̲   read identifier;
            Identifier:= Process identifier
         e̲n̲d̲  Identifier;






         main program of prescan0:
         runnumber:= 100; init;
         local for count:= max for count:= local count:= label count:=
           global count:= internal block depth:= string occurrence:=
           displ level:= prc level:= 0;
         old block cell pointer:= block cell pointer:= nlp;
         int labels:= false;
         space[text base]:=
           space[nl base - block cell pointer]:=
           space[nl base - block cell pointer - 1]:=
           space[nl base - block cell pointer - 3]:= 0;
         nlp:= block cell pointer + 6;
         space[nl base - block cell pointer - 4]:= - d25 - nlp;
         next symbol;
         Program;
         space[nl base - block cell pointer - 1]:=
           (global count + max for count + label count) × d13 +
           (internal block depth + 1) × (d13 + d6);
         space[nl base - block cell pointer - 2]:= nlp × d13;
         f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ max for count - 1 d̲o̲
              space[nl base - nlp - n]:= d19;
         nlp:= nlp + max for count;
         space[nl base - block cell pointer - 5]:= - d25 - nlp;
         end of text:= text pointer;
         output
      e̲n̲d̲  prescan0;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲ prescan1;
      b̲e̲g̲i̲n̲


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithexp;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = if t̲h̲e̲n̲ Ifclause (Arithexp)
            e̲l̲s̲e̲ Simple arithexp
         e̲n̲d̲  Arithexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple arithexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲
              next0:  next symbol;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arithexp;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol t̲h̲e̲n̲ unsigned number
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier; Arithmetic (n);
               Subscripted variable(n); Function designator(n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = if t̲h̲e̲n̲ Arithexp;
            i̲f̲ arithoperator last symbol t̲h̲e̲n̲ g̲o̲t̲o̲ next0
         e̲n̲d̲  Simple arithexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscripted variable (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = sub t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Subscrvar (n);
               dimension:= Subscrlist;
               List length (n)
            e̲n̲d̲
         e̲n̲d̲  Subscripted variable;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscrlist;
         b̲e̲g̲i̲n̲ next symbol;  Arithexp;
            i̲f̲ last symbol = comma t̲h̲e̲n̲ Subscrlist:= Subscrlist + 1
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = bus
                 t̲h̲e̲n̲ next symbol;
               Subscrlist:= 1
            e̲n̲d̲
         e̲n̲d̲  Subscrlist;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolexp;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = if t̲h̲e̲n̲ Ifclause (Boolexp)
            e̲l̲s̲e̲ Simple boolean
         e̲n̲d̲  Boolexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple boolean;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, type;
            i̲f̲ last symbol = non  t̲h̲e̲n̲ next symbol;
            i̲f̲ last symbol = open t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Exp (type);
               i̲f̲ last symbol = close
                 t̲h̲e̲n̲ next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               Subscripted variable (n);
               Function designator (n);
               i̲f̲ arithoperator last symbol ∨
                 relatoperator last symbol
                 t̲h̲e̲n̲ Arithmetic (n)
               e̲l̲s̲e̲ Boolean (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol ∨ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲ Simple arithexp
              e̲l̲s̲e̲
            i̲f̲ last symbol = true ∨ last symbol = false t̲h̲e̲n̲ next symbol;
            Rest of exp (type)
         e̲n̲d̲  Simple boolean;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Stringexp;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = if t̲h̲e̲n̲ Ifclause (Stringexp)
            e̲l̲s̲e̲ Simple stringexp
         e̲n̲d̲  Stringexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple stringexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Stringexp;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier; String (n);
               Subscripted variable (n);
               Function designator (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = quote
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  quote counter:= 1;
               next0: next symbol;
               i̲f̲ last symbol = unquote
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ quote counter:= 0;
                  next symbol
               e̲n̲d̲
               e̲l̲s̲e̲ g̲o̲t̲o̲ next0
            e̲n̲d̲
         e̲n̲d̲  Simple stringexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Desigexp;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = if t̲h̲e̲n̲ Ifclause (Desigexp)
            e̲l̲s̲e̲ Simple desigexp
         e̲n̲d̲  Desigexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple desigexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Desigexp;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier; Designational (n);
               Subscripted variable (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ in name list
                 t̲h̲e̲n̲ Designational (integer label)
            e̲n̲d̲
         e̲n̲d̲  Simple desigexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Exp (type); i̲n̲t̲e̲g̲e̲r̲ type;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Boolexp;
               next symbol; Simplexp (type);
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Type exp (type) e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Simplexp (type)
         e̲n̲d̲  Exp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Type exp (type); i̲n̲t̲e̲g̲e̲r̲ type;
         b̲e̲g̲i̲n̲   i̲f̲ type = ar ∨ type = re ∨ type = in
              t̲h̲e̲n̲ Arithexp
              e̲l̲s̲e̲ i̲f̲ type = bo
              t̲h̲e̲n̲ Boolexp
              e̲l̲s̲e̲ i̲f̲ type = st
              t̲h̲e̲n̲ Stringexp
              e̲l̲s̲e̲ i̲f̲ type = des
              t̲h̲e̲n̲ Desigexp
            e̲l̲s̲e̲ Exp (type)
         e̲n̲d̲  Type exp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simplexp (type); i̲n̲t̲e̲g̲e̲r̲ type;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            type:= un;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Exp ( type);
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier; Subscripted variable (n);
               Function designator (n);
               i̲f̲ arithoperator last symbol ∨
                 relatoperator last symbol
                 t̲h̲e̲n̲ Arithmetic (n)
                 e̲l̲s̲e̲ i̲f̲ booloperator last symbol
                 t̲h̲e̲n̲ Boolean (n)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ nonformal label (n)
                    t̲h̲e̲n̲ Designational (n);
                  type:= type bits (n)
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ in name list
                 t̲h̲e̲n̲ Designational (integer label)
               e̲l̲s̲e̲ type:= ar
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple arithexp; type:= ar e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = non ∨ last symbol = true ∨ last symbol = false
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple boolean; type:= bo e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = quote
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple stringexp; type:= st; g̲o̲t̲o̲ end e̲n̲d̲;
            Rest of exp (type);
            end:
         e̲n̲d̲  Simplexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Rest of exp (type); i̲n̲t̲e̲g̲e̲r̲ type;
         b̲e̲g̲i̲n̲   i̲f̲ arithoperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Simple arithexp;
               type:= ar
            e̲n̲d̲;
            i̲f̲ relatoperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Simple arithexp;
               type:= bo
            e̲n̲d̲;
            i̲f̲ booloperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Simple boolean;
               type:= bo
            e̲n̲d̲
         e̲n̲d̲  Rest of exp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Assignstat (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   Subscripted variable (n);
            i̲f̲  last symbol = colonequal t̲h̲e̲n̲  Right hand side (n)
         e̲n̲d̲  Assignstat;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Right hand side (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  m, type, type n;
            Assigned to (n); type n:= type bits (n);
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲  last symbol = colonequal
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ Insert (type n, m);
                  Right hand side (m); type:= type bits (m)
               e̲n̲d̲
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ Function designator (m);
                  i̲f̲ arithoperator last symbol ∨
                    relatoperator last symbol
                    t̲h̲e̲n̲ Arithmetic (m)
                    e̲l̲s̲e̲ i̲f̲ booloperator last symbol
                    t̲h̲e̲n̲ Boolean (m)
                  e̲l̲s̲e̲
                  b̲e̲g̲i̲n̲ Arbost (m);
                     type:= i̲f̲ type n = re ∨ type n = in
                       t̲h̲e̲n̲ ar
                     e̲l̲s̲e̲ type n;
                     Insert (type, m);
                     type:= type bits (m);
                     i̲f̲ type = re ∨ type = in
                       t̲h̲e̲n̲ type:= ar
                  e̲n̲d̲;
                  Rest of exp (type)
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ m:= type n; Type exp (type n);
               i̲f̲ m ≠ nondes t̲h̲e̲n̲ type n:= m;
               type:= i̲f̲ type n = re ∨ type n = in t̲h̲e̲n̲ ar
               e̲l̲s̲e̲ type n
            e̲n̲d̲;
            Insert (type, n)
         e̲n̲d̲  Right hand side;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Insert (type, n); i̲n̲t̲e̲g̲e̲r̲  type, n;
         b̲e̲g̲i̲n̲   i̲f̲ type = re
              t̲h̲e̲n̲ Real (n)
              e̲l̲s̲e̲ i̲f̲ type = in
              t̲h̲e̲n̲ Integer (n)
              e̲l̲s̲e̲ i̲f̲ type = bo
              t̲h̲e̲n̲ Boolean (n)
              e̲l̲s̲e̲ i̲f̲ type = ar t̲h̲e̲n̲ Arithmetic (n)
         e̲n̲d̲  Insert;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Function designator (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = open t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Function (n);
               dimension:= Parlist;
               List length (n)
            e̲n̲d̲
         e̲n̲d̲  Function designator;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Parlist;
         b̲e̲g̲i̲n̲   next symbol; Actual parameter;
            i̲f̲ last symbol = comma
              t̲h̲e̲n̲ Parlist:= Parlist + 1
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol;
               Parlist:= 1
            e̲n̲d̲
         e̲n̲d̲  Parlist;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Actual parameter;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  type;
            Exp (type)
         e̲n̲d̲  Actual parameter;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Procstat (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   Proc (n);
            dimension:= i̲f̲ last symbol = open t̲h̲e̲n̲ Parlist e̲l̲s̲e̲ 0;
            List length (n)
         e̲n̲d̲  Procstat;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Statement;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ Labelled statement (n)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = sub ∨
                    last symbol = colonequal
                    t̲h̲e̲n̲ Assignstat (n)
                  e̲l̲s̲e̲ Procstat (n)
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲  Intlabelled statement
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = goto t̲h̲e̲n̲ Gotostat
              e̲l̲s̲e̲
            i̲f̲ last symbol = begin
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ declarator last symbol t̲h̲e̲n̲ Block
               e̲l̲s̲e̲ Compound tail;
               next symbol
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = if t̲h̲e̲n̲ Ifclause (Statement)
              e̲l̲s̲e̲
            i̲f̲ last symbol = for t̲h̲e̲n̲ Forstat
         e̲n̲d̲  Statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Gotostat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ ¬ local label (n)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Designational (n);
                  Subscripted variable (n)
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Desigexp
         e̲n̲d̲ Gotostat;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Compound tail;
         b̲e̲g̲i̲n̲   Statement;
            i̲f̲ last symbol ≠ semicolon ∧ last symbol ≠ end
              t̲h̲e̲n̲ skip rest of statement (Statement);
            i̲f̲ last symbol = semicolon
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Compound tail e̲n̲d̲
         e̲n̲d̲  Compound tail;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ifclause (pr); p̲r̲o̲c̲e̲d̲u̲r̲e̲  pr;
         b̲e̲g̲i̲n̲   next symbol; Boolexp;
            i̲f̲ last symbol = then t̲h̲e̲n̲ next symbol;
            pr;
            i̲f̲ last symbol = else t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; pr e̲n̲d̲
         e̲n̲d̲ Ifclause;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Forstat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  n:= Identifier; Arithmetic (n);
               Subscripted variable (n);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲
                 next0: next symbol; Arithexp;
               i̲f̲ last symbol = step
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arithexp;
                  i̲f̲ last symbol = until
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
                     Arithexp
                  e̲n̲d̲
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = while
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Boolexp e̲n̲d̲;
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
               i̲f̲ last symbol = do    t̲h̲e̲n̲ next symbol;
               for count:= for count + 1;
               Statement;
               for count:= for count - 1
            e̲n̲d̲
         e̲n̲d̲  Forstat;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Switch declaration;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ dimension:= Switchlist;
                  Switch length (n)
               e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲ Switch declaration;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Switchlist;
         b̲e̲g̲i̲n̲   next symbol; Desigexp;
            i̲f̲ last symbol = comma t̲h̲e̲n̲ Switchlist:= Switchlist + 1
            e̲l̲s̲e̲ Switchlist:= 1
         e̲n̲d̲ Switchlist;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Array declaration;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  i, n, count;
            next symbol; n:= Identifier; count:= 1;
            next0:  i̲f̲ last symbol = comma t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ letter last symbol
                 t̲h̲e̲n̲ skip identifier;
               count:= count + 1; g̲o̲t̲o̲ next0
            e̲n̲d̲;
            i̲f̲ last symbol = sub   t̲h̲e̲n̲ b̲e̲g̲i̲n̲ in array declaration:= true;
               dimension:= Bound pair list;
               in array declaration:= false
            e̲n̲d̲
            e̲l̲s̲e̲ dimension:= 0;
            Check dimension (n);
            i̲f̲ own type t̲h̲e̲n̲ f̲o̲r̲ i:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ count d̲o̲
               b̲e̲g̲i̲n̲ Address (n, instruct counter);
                  instruct counter:= instruct counter +
                    3 × dimension + 6;
                  n:= next identifier (n)
               e̲n̲d̲;
            i̲f̲ last symbol = comma t̲h̲e̲n̲ Array declaration
         e̲n̲d̲  Array declaration;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Bound pair list;
         b̲e̲g̲i̲n̲   next symbol; Arithexp;
            i̲f̲ last symbol = colon t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arithexp e̲n̲d̲;
            i̲f̲ last symbol = comma
              t̲h̲e̲n̲ Bound pair list:= Bound pair list + 1
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = bus t̲h̲e̲n̲ next symbol;
               Bound pair list:= 1
            e̲n̲d̲
         e̲n̲d̲ Bound pair list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Procedure declaration;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, m;
            next symbol; n:= Identifier; entrance block;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  in formal list:= true ;
               next0: next symbol; m:= Identifier;
               i̲f̲ space[nl base - m] = 95 × d19
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (201);
                  space[nl base - m]:= 127 × d19
               e̲n̲d̲;
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol;
               in formal list:= false
            e̲n̲d̲;
            i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol;
            skip value list; skip specification list;
            i̲f̲ in code (n)
              t̲h̲e̲n̲ Scan code (n)
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ space[nl base - n] ÷ d19 = 19 ∧¬ use of counter stack
                 t̲h̲e̲n̲ space[nl base - block cell pointer - 2]:=
                 space[nl base - block cell pointer - 2] + 64;
               i̲f̲ last symbol = begin
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
                  i̲f̲ declarator last symbol
                    t̲h̲e̲n̲ Declaration list;
                  Compound tail; next symbol
               e̲n̲d̲
               e̲l̲s̲e̲ Statement;
               Addressing of block identifiers (n)
            e̲n̲d̲
         e̲n̲d̲ Procedure declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Block;
         b̲e̲g̲i̲n̲   entrance block; Declaration list; Compound tail;
            Addressing of block identifiers (0)
         e̲n̲d̲ Block;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Declaration list;
         b̲e̲g̲i̲n̲   i̲f̲ typedeclarator last symbol t̲h̲e̲n̲ skip type declaration
              e̲l̲s̲e̲
            i̲f̲ arr declarator last symbol t̲h̲e̲n̲ Array declaration
              e̲l̲s̲e̲
            i̲f̲ last symbol = switch       t̲h̲e̲n̲ Switch declaration
            e̲l̲s̲e̲ Procedure declaration;
            i̲f̲ last symbol = semicolon    t̲h̲e̲n̲ next symbol;
            i̲f̲ declarator last symbol     t̲h̲e̲n̲ Declaration list
         e̲n̲d̲  Declaration list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Program;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ Label declaration (n);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ unsigned number;
               i̲f̲ in name list
                 t̲h̲e̲n̲ Label declaration (integer label);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = begin
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ declarator last symbol
                 t̲h̲e̲n̲ Block
               e̲l̲s̲e̲ Compound tail
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ next symbol; Program e̲n̲d̲
         e̲n̲d̲  Program;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Labelled statement (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ nonformal label (n) t̲h̲e̲n̲ Label declaration (n);
            Statement
         e̲n̲d̲  Labelled statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Intlabelled statement;
         b̲e̲g̲i̲n̲   i̲f̲ in name list t̲h̲e̲n̲ Label declaration (integer label);
            Statement
         e̲n̲d̲  Intlabelled statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Label declaration (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲f̲ proc level = 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Designational (n); Address (n, instruct counter);
               space[nl base - n - 1]:=
                 space[nl base - n - 1] + instruct counter +
                 d20 × for count;
               space[prog base + instruct counter]:= 0;
               space[prog base + instruct counter + 1]:=
                 d18 × display level + dp0;
               instruct counter:= instruct counter + 2
            e̲n̲d̲
            e̲l̲s̲e̲ space[nl base - n - 1]:= space[nl base - n - 1] +
              d20 × for count;
            next symbol
         e̲n̲d̲  Label declaration;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Addressing of block identifiers (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  counter, f, code, code1;
            i̲f̲ n = 0 t̲h̲e̲n̲ space[nl base - block cell pointer - 1]:=
              space[nl base - block cell pointer - 1] + d13;
            i̲f̲ proc level > 0
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ counter:= d9 × display level + d8;
               i̲f̲ n = 0
                 t̲h̲e̲n̲ counter:= counter + 1 + d18
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ counter:= counter + display level + top of display;
                  f:= block cell pointer + 5;
                  next0: f:= next identifier (f);
                  i̲f̲ f > block cell pointer
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ Address (f, counter);
                     code1:= space[nl base - f] ÷ d18;
                     code:= code1 ÷ 2;
                     counter:= counter +
                       (i̲f̲ code = 64 ∨ code = 67 ∨ code = 70
                       t̲h̲e̲n̲ 2
                     e̲l̲s̲e̲ i̲f̲ code < 96
                       t̲h̲e̲n̲ 1
                     e̲l̲s̲e̲ i̲f̲ code1 = 2 × code
                       t̲h̲e̲n̲ 2 e̲l̲s̲e̲ 4);
                     g̲o̲t̲o̲ next0
                  e̲n̲d̲;
                  counter:= counter + d18;
                  code:= space[nl base - n] ÷ d19;
                  i̲f̲ code ≠ 24
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ f:= i̲f̲ wanted t̲h̲e̲n̲ 3 e̲l̲s̲e̲
                       i̲f̲ code = 16 ∨ code = 19 t̲h̲e̲n̲ 2 e̲l̲s̲e̲ 1;
                     Address (n + 2, counter);
                     counter:= counter + f;
                     space[nl base - block cell pointer - 1] :=
                       space[nl base - block cell pointer - 1] +
                       d13 × f
                  e̲n̲d̲
               e̲n̲d̲;




               f:= status;
               next1: i̲f̲ space[nl base - f] > 0
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Address (f, counter); counter:= counter + 1;
                  f:= f + 1;
                  g̲o̲t̲o̲ next1
               e̲n̲d̲;
               f:= block cell pointer + 4;
               next2: f:= next identifier (f); code:= space[nl base - f] ÷ d19;
               i̲f̲ f > block cell pointer ∧ f < status ∧ code < 64
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ code > 24
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ code < 36
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ Address (f, instruct counter);
                        instruct counter:=
                          instruct counter +
                          (i̲f̲ code= 32 ∨ code = 35
                          t̲h̲e̲n̲ 2 e̲l̲s̲e̲ 1)
                     e̲n̲d̲
                  e̲n̲d̲
                    e̲l̲s̲e̲
                  i̲f̲ code < 14
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ code ≠ 6 ∨
                       (code = 6 ∧
                       bit string (d19, d18,
                       space[nl base - f - 1]) = 0)
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ Address (f, counter);
                        counter:=
                          counter +
                          (i̲f̲ code = 0 ∨ code = 3 ∨ code = 6
                          t̲h̲e̲n̲ 2 e̲l̲s̲e̲ 1)
                     e̲n̲d̲
                  e̲n̲d̲;
                  g̲o̲t̲o̲ next2
               e̲n̲d̲;
               i̲f̲ counter > d18 + d9 × (display level + 1)
                 t̲h̲e̲n̲ ERRORMESSAGE (202);
               exit block
            e̲n̲d̲
            e̲l̲s̲e̲ Static addressing
         e̲n̲d̲  Addressing of block identifiers;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Static addressing;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  f, code;
            f:= status;
            next0:  i̲f̲ space[nl base - f] > 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Address (f, instruct counter);
               instruct counter:= instruct counter + 1; f:= f + 1;
               g̲o̲t̲o̲ next0
            e̲n̲d̲;
            f:= block cell pointer + 4;
            next1:  f:= next identifier (f); code:= space[nl base - f] ÷ d19;
            i̲f̲ f > block cell pointer ∧ f < status
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ code > 24 ∧ code < 36 ∨ code < 14 ∧ code ≠ 6
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Address (f, instruct counter);
                  instruct counter:=
                    instruct counter +
                    (i̲f̲ code = 0 ∨ code = 3 ∨
                    code = 32 ∨ code = 35 t̲h̲e̲n̲ 2
                  e̲l̲s̲e̲ 1)
               e̲n̲d̲;
               g̲o̲t̲o̲ next1
            e̲n̲d̲;
            exit block
         e̲n̲d̲ Static addressing;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Add type (n, t); i̲n̲t̲e̲g̲e̲r̲  n, t;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ code, new code, type;
            new code:= code:= space[nl base - n] ÷ d19;
            i̲f̲ code > 95
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ code = 127
                 t̲h̲e̲n̲ new code:= 96 + t
                 e̲l̲s̲e̲ i̲f̲ code = 120 ∧ t < 6
                 t̲h̲e̲n̲ new code:= 112 + t
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ type:= code - code ÷ 8 × 8;
                  i̲f̲ type = un ∨ (type = nondes ∧ t < 5) ∨
                    (type = ar ∧ t < 2)
                    t̲h̲e̲n̲ new code:= code - type + t
               e̲n̲d̲;
               space[nl base - n]:=
                 space[nl base - n] - (code - new code) × d19
            e̲n̲d̲
         e̲n̲d̲  Add type;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Real (n); i̲n̲t̲e̲g̲e̲r̲ n; b̲e̲g̲i̲n̲ Add type (n, re) e̲n̲d̲ Real;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Integer (n); i̲n̲t̲e̲g̲e̲r̲ n; b̲e̲g̲i̲n̲ Add type (n, in) e̲n̲d̲ Integer;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolean (n); i̲n̲t̲e̲g̲e̲r̲ n; b̲e̲g̲i̲n̲ Add type (n, bo) e̲n̲d̲ Boolean;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  String (n); i̲n̲t̲e̲g̲e̲r̲ n; b̲e̲g̲i̲n̲ Add type (n, st) e̲n̲d̲ String;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithmetic (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲  Add type (n, ar) e̲n̲d̲  Arithmetic;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arbost (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   Add type (n, nondes) e̲n̲d̲  Arbost;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Designational (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  p;
            i̲f̲ nonformal label (n)
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲f̲ bit string (d19, d18, space[nl base - n - 1]) = 1
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ space[nl base - n - 1]:=
                    abs (space[nl base - n - 1] - d18);
                  p:= corresponding block cell pointer (n);
                  i̲f̲ bit string (d6, d0, space[nl base - p - 2]) > 0
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ space[nl base - p - 3]:=
                       space[nl base - p - 3] + 1;
                     space[nl base - p - 1]:=
                       space[nl base - p - 1] + d14
                  e̲n̲d̲
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Add type (n, des)
         e̲n̲d̲  Designational;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Assigned to (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  code;
            code:= space[nl base - n] ÷ d19;
            i̲f̲ code > 95
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲f̲ code = 127 t̲h̲e̲n̲ code:= 101;
               i̲f̲ code < 102 t̲h̲e̲n̲ space[nl base - n]:= code × d19 + d18
               e̲l̲s̲e̲ Add type (n, nondes)
            e̲n̲d̲
         e̲n̲d̲ Assigned to;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscrvar (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ code, new code;
            code:= space[nl base - n] ÷ d19;
            i̲f̲ code > 95
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ new code:= i̲f̲ code = 127
                 t̲h̲e̲n̲ 111
               e̲l̲s̲e̲ i̲f̲ code < 104
                 t̲h̲e̲n̲ code + 8
               e̲l̲s̲e̲ code;
               space[nl base - n]:= space[nl base - n] +
                 (new code - code) × d19
            e̲n̲d̲
         e̲n̲d̲  Subscrvar;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Proc (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  code, new code;
            code:= space[nl base - n] ÷ d19;
            i̲f̲ code > 95
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ new code:= i̲f̲ code = 127
                 t̲h̲e̲n̲ 120
               e̲l̲s̲e̲ i̲f̲ code < 102
                 t̲h̲e̲n̲ code + 16
               e̲l̲s̲e̲ code;
               space[nl base - n]:= space[nl base - n] +
                 (new code- code) × d19
            e̲n̲d̲
         e̲n̲d̲  Proc;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Function (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Arbost (n); Proc (n) e̲n̲d̲ Function;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  List length (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word;
            i̲f̲ space[nl base - n] ÷ d19 > 95
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ word:= space[nl base - n - 1 ];
               i̲f̲ bit string (d18, d0, word) = 0
                 t̲h̲e̲n̲ space[nl base - n - 1]:= word + dimension + 1
            e̲n̲d̲
         e̲n̲d̲  List length;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Switch length (n);  i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   space[nl base - n - 1]:= dimension + 1 e̲n̲d̲  Switch length;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Address (n, m); i̲n̲t̲e̲g̲e̲r̲  n, m;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word;
            word:= space[nl base - n] ÷ d18;
            space[nl base - n]:= word × d18 + m
         e̲n̲d̲  Address;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Check dimension (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ space[nl base - n - 1] ≠ dimension + 1
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (203);
               space[nl base - n - 1]:= dimension + 1
            e̲n̲d̲
         e̲n̲d̲  Check dimension;






         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Identifier;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n;
            last nlp:= nlp; read identifier; Identifier:= n:= look up;
            i̲f̲ n > nlp t̲h̲e̲n̲ Ask librarian;
            i̲f̲ n > nlp t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (204);
               nlp:= nlp + word count + 3;
               space[nl base - nlp + 1]:= 0
            e̲n̲d̲
         e̲n̲d̲  Identifier;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Scan code (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   block cell pointer:= space[nl base - block cell pointer] ÷ d13;
            next0:  next symbol; i̲f̲  last symbol = minus t̲h̲e̲n̲ next symbol;
            i̲f̲ letter last symbol t̲h̲e̲n̲ Identifier e̲l̲s̲e̲ unsigned integer (0);
            i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next0;
            i̲f̲ last symbol = unquote t̲h̲e̲n̲ next symbol
         e̲n̲d̲  Scan code;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ask librarian;
         b̲e̲g̲i̲n̲   c̲o̲m̲m̲e̲n̲t̲ if the current identifier occurs in the library
              then this procedure will add a new namecell to
              the name list and increase nlp;
         e̲n̲d̲  Ask librarian;






         main program of prescan 1:
         i̲f̲ ¬ text in memory
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ NEWPAGE;
            PRINTTEXT (“input tape for prescan1”)
         e̲n̲d̲;
         runnumber:= 200; init;
         block cell pointer:= next block cell pointer:= 0;
         dp0:= instruct counter;
         instruct counter:= instruct counter + top of display;
         space[nl base - nlp] := -1;
         next symbol; entrance block;
         Program; Static addressing;
         output
      e̲n̲d̲ prescan1;












      p̲r̲o̲c̲e̲d̲u̲r̲e̲ translate;
      b̲e̲g̲i̲n̲

         i̲n̲t̲e̲g̲e̲r̲ last lnc, lnc, last lncr, macro, parameter, state,
           stack0, stack1, b, ret level, max depth,
           ret max depth, max depth isr, max display length,
           max proc level, ecount, controlled variable, increment,
           l0, l1, l2, l3, l4, l5, number of switch elements,
           switch identifier, switch list count, sword,
           address of constant, sum of maxima;

         B̲o̲o̲l̲e̲a̲n̲ in switch declaration, in code body, if statement forbidden,
           complicated, complex step element;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  future1, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  future1:= future2:= 0;
               next symbol; Boolexp; Macro2 (COJU, future1);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (300)
               e̲l̲s̲e̲ next symbol;
               Simple arithexp;
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro2 (JU, future2);
                  Substitute (future1);
                  next symbol; Arithexp;
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (301)
            e̲n̲d̲
            e̲l̲s̲e̲ Simple arithexp
         e̲n̲d̲  Arithexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple arithexp;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = minus t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Term;
               Macro (NEG)
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = plus
                 t̲h̲e̲n̲ next symbol;
               Term
            e̲n̲d̲;
            Next term
         e̲n̲d̲  Simple arithexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next term;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = plus  t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK);
               next symbol; Term;
               Macro (ADD); Next term
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = minus t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro (STACK);
               next symbol; Term;
               Macro (SUB); Next term
            e̲n̲d̲
         e̲n̲d̲  Next term;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Term;  b̲e̲g̲i̲n̲  Factor; Next factor e̲n̲d̲  Term;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next factor;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = mul t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK);
               next symbol; Factor;
               Macro (MUL); Next factor
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = div t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK);
               next symbol; Factor;
               Macro (DIV); Next factor
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = idi t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK);
               next symbol; Factor;
               Macro (IDI); Next factor
            e̲n̲d̲
         e̲n̲d̲  Next factor;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Factor;  b̲e̲g̲i̲n̲  Primary; Next primary e̲n̲d̲  Factor;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next primary;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = ttp t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK);
               next symbol; Primary;
               Macro (TTP); Next primary
            e̲n̲d̲
         e̲n̲d̲  Next primary;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Primary;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = open t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Arithexp;
               i̲f̲ last symbol = close
                 t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (302)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol  t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Unsigned number;
               Arithconstant
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol t̲h̲e̲n̲ b̲e̲g̲i̲n̲  n:= Identifier;
               Subscripted variable (n);
               Function designator (n);
               Arithname (n)
            e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲  ERRORMESSAGE (303);
               i̲f̲ last symbol = if ∨ last symbol = plus ∨
                 last symbol = minus
                 t̲h̲e̲n̲ Arithexp
            e̲n̲d̲
         e̲n̲d̲  Primary;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithname (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲f̲ Nonarithmetic (n) t̲h̲e̲n̲  ERRORMESSAGE (304);
            complicated:= Formal (n) ∨ Function (n);
            i̲f̲ Simple (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Formal (n)  t̲h̲e̲n̲ Macro2 (DOS, n) e̲l̲s̲e̲
               i̲f̲ Integer (n) t̲h̲e̲n̲ Macro2 (TIV, n)
               e̲l̲s̲e̲ Macro2 (TRV, n)
            e̲n̲d̲
         e̲n̲d̲  Arithname;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscripted variable (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲f̲ Subscrvar (n) t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Address description (n);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro (STACK);
                  Macro (STAA)
               e̲n̲d̲
               e̲l̲s̲e̲ Evaluation of (n)
            e̲n̲d̲
         e̲n̲d̲  Subscripted variable;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Address description (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = sub
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; dimension:= Subscript list;
               Check dimension (n);
               i̲f̲ Formal (n)        t̲h̲e̲n̲ Macro2 (DOS, n) e̲l̲s̲e̲
               i̲f̲ Designational (n) t̲h̲e̲n̲ Macro2 (TSWE, n)
               e̲l̲s̲e̲ Macro2 (TAK, n)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (305)
         e̲n̲d̲  Address description;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Evaluation of (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲  Designational(n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  i̲f̲ Formal (n) t̲h̲e̲n̲  Macro (TFSL)
               e̲l̲s̲e̲  Macro (TSL)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ Boolean (n) t̲h̲e̲n̲ Macro (TSB)  e̲l̲s̲e̲
            i̲f̲ String (n)  t̲h̲e̲n̲ Macro (TSST) e̲l̲s̲e̲
            i̲f̲ Formal (n)  t̲h̲e̲n̲ Macro (TFSU) e̲l̲s̲e̲
            i̲f̲ Integer (n) t̲h̲e̲n̲ Macro (TSI)  e̲l̲s̲e̲ Macro (TSR)
         e̲n̲d̲  Evaluation of;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscript list;
         b̲e̲g̲i̲n̲   Arithexp;
            i̲f̲ last symbol = comma
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STACK); next symbol;
               Subscript list:= Subscript list + 1
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲  i̲f̲ last symbol = bus
                 t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (306);
               Subscript list:= 1
            e̲n̲d̲
         e̲n̲d̲  Subscript list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ future1, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  future1:= future2:= 0;
               next symbol; Boolexp; Macro2 (COJU, future1);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (307)
               e̲l̲s̲e̲ next symbol;
               Simple boolean;
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (JU, future2);
                  Substitute (future1);
                  next symbol; Boolexp;
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (308)
            e̲n̲d̲
            e̲l̲s̲e̲ Simple boolean
         e̲n̲d̲  Boolexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple boolean;
         b̲e̲g̲i̲n̲   Implication; Next implication e̲n̲d̲  Simple boolean;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next implication;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = qvl t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro (STAB);
               next symbol; Implication;
               Macro (QVL); Next implication
            e̲n̲d̲
         e̲n̲d̲  Next implication;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Implication;  b̲e̲g̲i̲n̲  Boolterm; Next boolterm e̲n̲d̲  Implication;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next boolterm;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = imp t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STAB);
               next symbol; Boolterm;
               Macro (IMP); Next boolterm
            e̲n̲d̲
         e̲n̲d̲  Next boolterm;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolterm;  b̲e̲g̲i̲n̲  Boolfac; Next boolfac e̲n̲d̲  Boolterm;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next boolfac;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = or  t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STAB);
               next symbol; Boolfac;
               Macro (OR); Next boolfac
            e̲n̲d̲
         e̲n̲d̲  Next boolfac;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolfac;  b̲e̲g̲i̲n̲  Boolsec; Next boolsec e̲n̲d̲  Boolfac;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next boolsec;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = and t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (STAB);
               next symbol; Boolsec;
               Macro (AND); Next boolsec
            e̲n̲d̲
         e̲n̲d̲  Next boolsec;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolsec;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = non t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Boolprim;
               Macro (NON)
            e̲n̲d̲
            e̲l̲s̲e̲ Boolprim
         e̲n̲d̲  Boolsec;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolprim;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ type, n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arboolexp (type);
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (309);
               i̲f̲ type = ar   t̲h̲e̲n̲ Rest of relation e̲l̲s̲e̲
               i̲f̲ type = arbo t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ arithoperator last symbol
                    t̲h̲e̲n̲ Rest of relation
                  e̲l̲s̲e̲ Relation
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               Subscripted variable (n);
               Boolprimrest (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol ∨ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple arithexp; Rest of relation e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = true ∨ last symbol = false
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (TBC, last symbol); next symbol e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (310)
         e̲n̲d̲  Boolprim;






         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Relation;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ relmacro;
            i̲f̲ relatoperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ relmacro:= Relatmacro; Macro (STACK);
               next symbol; Simple arithexp;
               Macro (relmacro); Relation:= true
            e̲n̲d̲
            e̲l̲s̲e̲ Relation:= false
         e̲n̲d̲  Relation;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Rest of relation;
         b̲e̲g̲i̲n̲   Rest of arithexp;
            i̲f̲ ¬ Relation t̲h̲e̲n̲  ERRORMESSAGE (311)
         e̲n̲d̲  Rest of relation;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolprimrest (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Function designator (n);
            i̲f̲ Arithmetic (n) ∨ arithoperator last symbol∨ relatoperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Arithname (n); Rest of relation e̲n̲d̲
            e̲l̲s̲e̲ Boolname (n)
         e̲n̲d̲  Boolprimrest;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolname (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Nonboolean (n) t̲h̲e̲n̲ ERRORMESSAGE (312);
            i̲f̲ Simple (n)     t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS, n)
               e̲l̲s̲e̲ Macro2 (TBV, n)
            e̲n̲d̲
         e̲n̲d̲  Boolname;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arboolexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ future1, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  future1:= future2:= 0;
               next symbol; Boolexp; Macro2 (COJU, future1);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (313)
               e̲l̲s̲e̲ next symbol;
               Simple arboolexp (type);
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲  Macro2 (JU, future2); Substitute (future1);
                  next symbol;
                  i̲f̲ type = bo t̲h̲e̲n̲ Boolexp e̲l̲s̲e̲
                  i̲f̲ type = ar t̲h̲e̲n̲ Arithexp
                  e̲l̲s̲e̲ Arboolexp (type);
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (314)
            e̲n̲d̲
            e̲l̲s̲e̲ Simple arboolexp (type)
         e̲n̲d̲ Arboolexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple arboolexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Arboolexp (type);
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (315);
               i̲f̲ type = bo ∨
                 type = arbo ∧ booloperator last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Rest of boolexp; type:= bo e̲n̲d̲
                 e̲l̲s̲e̲ i̲f̲ type = ar ∨
                 arithoperator last symbol ∨
                 relatoperator last symbol
                 t̲h̲e̲n̲ Rest of arboolexp (type)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  n:= Identifier; Subscripted variable (n);
               Arboolrest (type, n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol ∨ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple arithexp; Rest of arboolexp (type) e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = non ∨ last symbol = true ∨ last symbol = false
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple boolean; type:= bo e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲ ERRORMESSAGE (316); type:= arbo e̲n̲d̲
         e̲n̲d̲  Simple arboolexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Rest of arithexp;
         b̲e̲g̲i̲n̲   Next primary; Next factor; Next term e̲n̲d̲ Rest of arithexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Rest of boolexp;
         b̲e̲g̲i̲n̲   Next boolsec; Next boolfac; Next boolterm; Next implication
         e̲n̲d̲ Rest of boolexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Rest of arboolexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   Rest of arithexp;
            i̲f̲ Relation
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Rest of boolexp; type:= bo e̲n̲d̲ e̲l̲s̲e̲ type:= ar
         e̲n̲d̲  Rest of arboolexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arboolrest (type, n); i̲n̲t̲e̲g̲e̲r̲  type, n;
         b̲e̲g̲i̲n̲   Function designator (n);
            i̲f̲ Boolean (n) ∨ booloperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Boolname (n); Rest of boolexp; type:= bo e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲  Arithmetic (n) ∨ arithoperator last symbol ∨
              relatoperator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Arithname (n); Rest of arboolexp (type) e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲  i̲f̲ String (n) ∨ Designational (n)
                 t̲h̲e̲n̲ ERRORMESSAGE (317);
               Macro2 (DOS, n); type:= arbo
            e̲n̲d̲
         e̲n̲d̲  Arboolrest;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Stringexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  futurel, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  futurel:= future2:= 0;
               next symbol; Boolexp; Macro2 ( COJU, futurel);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (318)
               e̲l̲s̲e̲ next symbol;
               Simple stringexp;
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro2 (JU, future2);
                  Substitute (futurel);
                  next symbol; Stringexp;
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (319)
            e̲n̲d̲
            e̲l̲s̲e̲ Simple stringexp
         e̲n̲d̲  Stringexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple stringexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  future, n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Stringexp;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (320)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲  letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  n:= Identifier; Subscripted variable (n);
               Stringname (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = quote
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro (TCST); future:= 0; Macro2 (JU, future);
               Constant string; Substitute (future)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (321)
         e̲n̲d̲  Simple stringexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Stringname (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Nonstring (n) t̲h̲e̲n̲ ERRORMESSAGE (322);
            Function designator (n);
            i̲f̲ Simple (n) t̲h̲e̲n̲ b̲e̲g̲i̲n̲  i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS, n)
               e̲l̲s̲e̲ Macro2 (TSTV, n)
            e̲n̲d̲
         e̲n̲d̲  Stringname;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Desigexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  futurel, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  futurel:= future2:= 0;
               next symbol; Boolexp; Macro2 (COJU, futurel);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (323)
               e̲l̲s̲e̲ next symbol;
               Simple desigexp;
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (JU, future2);
                  Substitute (futurel);
                  next symbol; Desigexp;
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (324)
            e̲n̲d̲
            e̲l̲s̲e̲ Simple desigexp
         e̲n̲d̲  Desigexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple desigexp;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲  last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Desigexp;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (325)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               Subscripted variable (n);
               Designame (n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲  digit last symbol t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
               i̲f̲ in name list
                 t̲h̲e̲n̲ Macro2 (TLV, integer label)
               e̲l̲s̲e̲ ERRORMESSAGE (326)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (327)
         e̲n̲d̲  Simple desigexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Designame (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Nondesignational (n) t̲h̲e̲n̲ ERRORMESSAGE (328);
            i̲f̲ Simple (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS, n)
               e̲l̲s̲e̲ Macro2 (TLV, n)
            e̲n̲d̲
         e̲n̲d̲  Designame;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ardesexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   Exp (type);
            i̲f̲ type = bo ∨ type = st t̲h̲e̲n̲ ERRORMESSAGE (329);
            i̲f̲ type = un             t̲h̲e̲n̲ type:= intlab e̲l̲s̲e̲
            i̲f̲ type = nondes         t̲h̲e̲n̲ type:= ar
         e̲n̲d̲  Ardesexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nondesexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   Exp (type);
            i̲f̲ type = des    t̲h̲e̲n̲ ERRORMESSAGE (330);
            i̲f̲ type = un     t̲h̲e̲n̲ type:= nondes e̲l̲s̲e̲
            i̲f̲ type = intlab t̲h̲e̲n̲ type:= ar
         e̲n̲d̲  Nondesexp;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Exp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  future1, future2;
            i̲f̲ last symbol = if
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  future1:= future2:= 0;
               next symbol; Boolexp; Macro2 (COJU, future1);
               i̲f̲ last symbol ≠ then t̲h̲e̲n̲ ERRORMESSAGE (331)
               e̲l̲s̲e̲ next symbol;
               Simplexp (type);
               i̲f̲ last symbol = else
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲  Macro2 (JU, future2);
                  Substitute (future1); next symbol;
                  i̲f̲ type = ar     t̲h̲e̲n̲ Arithexp        e̲l̲s̲e̲
                  i̲f̲ type = bo     t̲h̲e̲n̲ Boolexp         e̲l̲s̲e̲
                  i̲f̲ type = st     t̲h̲e̲n̲ Stringexp       e̲l̲s̲e̲
                  i̲f̲ type = des    t̲h̲e̲n̲ Desigexp        e̲l̲s̲e̲
                  i̲f̲ type = intlab t̲h̲e̲n̲ Ardesexp (type) e̲l̲s̲e̲
                  i̲f̲ type = nondes t̲h̲e̲n̲ Nondesexp (type)
                  e̲l̲s̲e̲ Exp (type);
                  Substitute (future2)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (332)
            e̲n̲d̲
            e̲l̲s̲e̲  Simplexp (type)
         e̲n̲d̲ Exp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simplexp (type); i̲n̲t̲e̲g̲e̲r̲  type;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  next symbol; Exp (type);
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (333);
               i̲f̲ type = bo ∨ (type = nondes ∨ type = un) ∧
                 booloperator last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Rest of boolexp; type:= bo e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ type ≠ st ∧ type ≠ des ∧ operator last symbol
                 t̲h̲e̲n̲  Rest of arboolexp (type)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  n:= Identifier; Subscripted variable (n);
               Exprest (type, n)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Unsigned number; Arithconstant;
               i̲f̲ in name list ∧ ( ¬ operator last symbol)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Macro2 (TLV, integer label);
                  type:= intlab
               e̲n̲d̲
               e̲l̲s̲e̲ Rest of arboolexp (type)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = plus ∨ last symbol = minus
              t̲h̲e̲n̲ Simple arboolexp (type)
              e̲l̲s̲e̲
            i̲f̲ last symbol = non ∨ last symbol = true ∨ last symbol = false
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple boolean; type:= bo e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = quote t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Simple stringexp; type:= st e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲  ERRORMESSAGE (334); type:= un e̲n̲d̲
         e̲n̲d̲  Simplexp;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Exprest (type, n); i̲n̲t̲e̲g̲e̲r̲ type, n;
         b̲e̲g̲i̲n̲   i̲f̲ Designational (n) t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Designame (n); type:= des e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ String (n)        t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Stringname (n); type:= st e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲  Function designator (n);
               i̲f̲ Boolean (n) ∨ booloperator last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Boolname (n); Rest of boolexp; type:= bo e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ Arithmetic (n) ∨ arithoperator last symbol ∨
                 relatoperator last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Arithname (n); Rest of arboolexp (type) e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ Simple (n) t̲h̲e̲n̲  Macro2 (DOS, n);
                  type:= i̲f̲ Unknown (n) t̲h̲e̲n̲ un e̲l̲s̲e̲ nondes
               e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲  Exprest;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Assignstat (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Subscripted variable (n);
            i̲f̲ last symbol = colonequal t̲h̲e̲n̲ Distribute on type (n)
            e̲l̲s̲e̲ ERRORMESSAGE (335)
         e̲n̲d̲  Assignstat;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Distribute on type (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Integer (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Intassign (n); Distribute on type:= in e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲  Real (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Realassign (n); Distribute on type:= re e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ Boolean (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Boolassign (n); Distribute on type:= bo e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ String (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  Stringassign (n); Distribute on type:= st e̲n̲d̲
            e̲l̲s̲e̲ Distribute on type:= i̲f̲ Arithmetic (n) t̲h̲e̲n̲ Arassign (n)
            e̲l̲s̲e̲ Unassign (n)
         e̲n̲d̲  Distribute on type;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Prepare (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Function (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  i̲f̲ Formal (n) t̲h̲e̲n̲ ERRORMESSAGE (336)
                 e̲l̲s̲e̲
               i̲f̲  Outside declaration (n) t̲h̲e̲n̲ ERRORMESSAGE (337)
               e̲l̲s̲e̲ n:= Local position (n)
            e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ Simple (n) ∧ Formal (n) t̲h̲e̲n̲ Macro2 (DOS2, n);
            next symbol
         e̲n̲d̲  Prepare;






         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Intassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ m;  B̲o̲o̲l̲e̲a̲n̲  rounded;
            i̲f̲  Noninteger (n) t̲h̲e̲n̲  ERRORMESSAGE (338);
            Prepare (n); rounded:= false;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  m:= Identifier; Subscripted variable (m);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ rounded:= Intassign (m)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲  Function designator (m);
                  Arithname (m); Rest of arithexp
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Arithexp;
            i̲f̲ Subscrvar (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲   i̲f̲ Formal (n) t̲h̲e̲n̲ Macro (STFSU)
                 e̲l̲s̲e̲
               i̲f̲ rounded    t̲h̲e̲n̲ Macro (SSTSI)
               e̲l̲s̲e̲ Macro (STSI)
            e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS3, n)
              e̲l̲s̲e̲ i̲f̲ rounded    t̲h̲e̲n̲ Macro2 (SSTI, n)
            e̲l̲s̲e̲ Macro2 (STI, n);
            Intassign:= Formal (n) i̲m̲p̲l̲  rounded
         e̲n̲d̲ Intassign;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Realassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  m;
            i̲f̲ Nonreal (n) t̲h̲e̲n̲ ERRORMESSAGE (339);
            Prepare (n);
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ Realassign (m)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Function designator (m);
                  Arithname (m); Rest of arithexp
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Arithexp;
            i̲f̲  Subscrvar (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro (STFSU)
               e̲l̲s̲e̲ Macro (STSR)
            e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS3, n)
            e̲l̲s̲e̲ Macro2 (STR, n)
         e̲n̲d̲  Realassign;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ m;
            i̲f̲ Nonboolean (n) t̲h̲e̲n̲  ERRORMESSAGE (340);
            Prepare (n);
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ Boolassign (m)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Boolprimrest (m); Rest of boolexp e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Boolexp;
            i̲f̲  Subscrvar (n) t̲h̲e̲n̲ Macro (STSB)
              e̲l̲s̲e̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS3, n)
            e̲l̲s̲e̲ Macro2 (STB, n)
         e̲n̲d̲  Boolassign;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Stringassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ m;
            i̲f̲  Nonstring (n) t̲h̲e̲n̲  ERRORMESSAGE (341);
            Prepare (n);
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ Stringassign (m)
               e̲l̲s̲e̲ Stringname (m)
            e̲n̲d̲
            e̲l̲s̲e̲ Stringexp;
            i̲f̲ Subscrvar (n) t̲h̲e̲n̲ Macro (STSST)
              e̲l̲s̲e̲ i̲f̲ Formal (n) t̲h̲e̲n̲ Macro2 (DOS3, n)
            e̲l̲s̲e̲ Macro2 (STST, n)
         e̲n̲d̲  Stringassign;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ type, m;
            i̲f̲  Nonarithmetic (n) t̲h̲e̲n̲  ERRORMESSAGE (342);
            Prepare (n); type:= ar;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Nonarithmetic (m)
                    t̲h̲e̲n̲ ERRORMESSAGE (343);
                  type:= Distribute on type (m)
               e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Function designator (m);
                  Arithname (m); Rest of arithexp
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ Arithexp;
            i̲f̲ Subscrvar (n) t̲h̲e̲n̲ Macro (STFSU) e̲l̲s̲e̲ Macro2 (DOS3, n);
            Arassign:= type
         e̲n̲d̲  Arassign;






         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Unassign (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  type, m;
            i̲f̲  Nontype (n) t̲h̲e̲n̲  ERRORMESSAGE (344);
            Prepare (n);
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= Identifier; Subscripted variable (m);
               i̲f̲ Nontype (m) t̲h̲e̲n̲ ERRORMESSAGE (345);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲ type:= Distribute on type (m)
               e̲l̲s̲e̲ Exprest (type, m)
            e̲n̲d̲
            e̲l̲s̲e̲ Nondesexp (type);
            i̲f̲ Subscrvar (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ type = bo t̲h̲e̲n̲ Macro (STSB)
                 e̲l̲s̲e̲
               i̲f̲ type = st t̲h̲e̲n̲ Macro (STSST)
               e̲l̲s̲e̲ Macro (STFSU)
            e̲n̲d̲
            e̲l̲s̲e̲ Macro2 (DOS3, n);
            Unassign:= type
         e̲n̲d̲  Unassign;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Function designator (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ Proc (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Nonfunction (n) t̲h̲e̲n̲ ERRORMESSAGE (346);
               Procedure call (n)
            e̲n̲d̲
         e̲n̲d̲  Function designator;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Procstat (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲  Proc (n)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Procedure call (n);
               i̲f̲  ¬ (In library (n) ∨ Function (n))
                 t̲h̲e̲n̲ last lnc:= - n;
               i̲f̲  Formal (n) ∨ (Function (n) ∧ String (n))
                 t̲h̲e̲n̲  Macro (REJST)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (347)
         e̲n̲d̲  Procstat;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Procedure call (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  number of parameters;
            i̲f̲ Operator like (n)
              t̲h̲e̲n̲ Process operator (n)
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ number of parameters:= List length (n);
               i̲f̲ number of parameters ≠ 0
                 t̲h̲e̲n̲ Parameter list (n, number of parameters)
                 e̲l̲s̲e̲ i̲f̲ Formal (n)
                 t̲h̲e̲n̲ Macro2 (DOS, n)
                 e̲l̲s̲e̲ i̲f̲ In library(n) t̲h̲e̲n̲ Macro2 (ISUBJ, n)
               e̲l̲s̲e̲ Macro2 (SUBJ, n)
            e̲n̲d̲
         e̲n̲d̲ Procedurecall;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ordinal number (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Ordinal number:= i̲f̲ Formal (n) t̲h̲e̲n̲ 15
            e̲l̲s̲e̲
              i̲f̲ Subscrvar (n)
              t̲h̲e̲n̲ (i̲f̲ Arithmetic (n)
              t̲h̲e̲n̲ (i̲f̲ Real (n) t̲h̲e̲n̲ 8 e̲l̲s̲e̲ 9)
            e̲l̲s̲e̲ i̲f̲ Boolean (n)
              t̲h̲e̲n̲ 10 e̲l̲s̲e̲ 11)
            e̲l̲s̲e̲
              i̲f̲ Function (n)
              t̲h̲e̲n̲ (i̲f̲ Arithmetic (n)
              t̲h̲e̲n̲ (i̲f̲ Real (n) t̲h̲e̲n̲ 24 e̲l̲s̲e̲ 25)
            e̲l̲s̲e̲ i̲f̲ Boolean (n) t̲h̲e̲n̲ 26 e̲l̲s̲e̲ 27)
            e̲l̲s̲e̲
              i̲f̲ Proc (n) t̲h̲e̲n̲ 30
            e̲l̲s̲e̲
              i̲f̲ Arithmetic(n)
              t̲h̲e̲n̲ (i̲f̲ Real (n) t̲h̲e̲n̲ 0 e̲l̲s̲e̲ 1)
            e̲l̲s̲e̲ i̲f̲ Boolean (n)
              t̲h̲e̲n̲ 2
            e̲l̲s̲e̲ i̲f̲ String (n) t̲h̲e̲n̲ 3 e̲l̲s̲e̲ 14
         e̲n̲d̲  Ordinal number;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Parameter list (n, number of parameters);
            i̲n̲t̲e̲g̲e̲r̲  n, number of parameters;
         b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲  count, m, f, apd, type, future;
            B̲o̲o̲l̲e̲a̲n̲  simple identifier;
            i̲n̲t̲e̲g̲e̲r̲  a̲r̲r̲a̲y̲  descriptor list[1 : number of parameters];
            count:= future:= 0; f:= n;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲
               next: count:= count + 1; next symbol;
               Actual parameter (apd, simple identifier, type, future);
               i̲f̲ count ≤ number of parameters
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ descriptor list[count]:= apd;
                  i̲f̲  ¬ Formal (n)
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ f:= Next formal identifier (f);
                     i̲f̲ simple identifier
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ i̲f̲ Subscrvar (f)
                          t̲h̲e̲n̲
                        b̲e̲g̲i̲n̲ i̲f̲ Nonsubscrvar (type)
                             t̲h̲e̲n̲  ERRORMESSAGE (348);
                           Check type (f, type);
                           Check list length (f, type)
                        e̲n̲d̲
                          e̲l̲s̲e̲
                        i̲f̲ Proc (f)
                          t̲h̲e̲n̲
                        b̲e̲g̲i̲n̲ i̲f̲ Nonproc (type)
                             t̲h̲e̲n̲ ERRORMESSAGE (349);
                           Check list length (f, type);
                           i̲f̲ Function (f)
                             t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Nonfunction (type)
                                t̲h̲e̲n̲ ERRORMESSAGE (350);
                              Check type (f, type)
                           e̲n̲d̲
                        e̲n̲d̲
                          e̲l̲s̲e̲
                        i̲f̲ Simple (f)
                          t̲h̲e̲n̲
                        b̲e̲g̲i̲n̲ i̲f̲ Nonsimple (type)
                             t̲h̲e̲n̲ ERRORMESSAGE (351);
                           Check type (f, type)
                        e̲n̲d̲
                     e̲n̲d̲
                     e̲l̲s̲e̲
                     b̲e̲g̲i̲n̲ i̲f̲ Subscrvar (f) ∨ Proc (f)
                          t̲h̲e̲n̲ ERRORMESSAGE (352);
                        i̲f̲ Assigned to (f) ∧ Nonassignable (apd)
                          t̲h̲e̲n̲ ERRORMESSAGE (353);
                        i̲f̲ Arithmetic(f) ∧
                          (type = bo ∨ type = st ∨ type = des)
                          t̲h̲e̲n̲ ERRORMESSAGE (354) e̲l̲s̲e̲
                        i̲f̲ Boolean (f) ∧
                          type ≠ bo ∧ type ≠ nondes ∧ type ≠ un
                          t̲h̲e̲n̲ ERRORMESSAGE (355) e̲l̲s̲e̲
                        i̲f̲ String (f) ∧
                          type ≠ st ∧ type ≠ nondes ∧ type ≠ un
                          t̲h̲e̲n̲ ERRORMESSAGE (356) e̲l̲s̲e̲
                        i̲f̲ Designational (f) ∧
                          type ≠ des ∧ type ≠ un
                          t̲h̲e̲n̲ ERRORMESSAGE (357) e̲l̲s̲e̲
                        i̲f̲ Arbost (f) ∧ type = des
                          t̲h̲e̲n̲ ERRORMESSAGE (358)
                     e̲n̲d̲
                  e̲n̲d̲
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (359);
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next;
               i̲f̲ last symbol = close
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
                  i̲f̲ count < number of parameters
                    t̲h̲e̲n̲ ERRORMESSAGE (360)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (361)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (362);
            i̲f̲ future ≠ 0 t̲h̲e̲n̲  Substitute (future);
            i̲f̲ Formal (n) t̲h̲e̲n̲  Macro2 (DOS, n) e̲l̲s̲e̲  i̲f̲ In library (n)
              t̲h̲e̲n̲ Macro2 (ISUBJ, n)
            e̲l̲s̲e̲ Macro2 (SUBJ, n);
            m:= 0;
            next apd: i̲f̲ m < count ∧ m < number of parameters
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= m + 1; apd:= descriptor list[m];
               Macro2 (CODE, apd); g̲o̲t̲o̲ next apd
            e̲n̲d̲
         e̲n̲d̲  Parameter list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Actual parameter (apd, simple identifier, type, future);
            i̲n̲t̲e̲g̲e̲r̲  apd, type, future; B̲o̲o̲l̲e̲a̲n̲  simple identifier;
         b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲  n, begin address;
            begin address:= Order counter + (i̲f̲ future = 0 t̲h̲e̲n̲ 1 e̲l̲s̲e̲ 0);
            simple identifier:= false;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ last symbol = comma ∨ last symbol = close
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ type:= n; simple identifier:= true;
                  i̲f̲ Proc (n) ∧ ¬ Formal (n)
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ future = 0 t̲h̲e̲n̲ Macro2 (JU, future);
                     Macro (TFD);
                     i̲f̲ In library (n) t̲h̲e̲n̲ Macro2 (LJU1, n)
                     e̲l̲s̲e̲ Macro2 (JU1, n);
                     apd:= d20 × Ordinal number (n) + begin address
                  e̲n̲d̲
                    e̲l̲s̲e̲ i̲f̲ Subscrvar (n) ∧ Designational (n) ∧¬ Formal (n)
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ future = 0
                       t̲h̲e̲n̲ Macro2 (JU, future);
                     Macro2 (TSWE, n);
                     apd:= 12 × d20 + begin address
                  e̲n̲d̲
                  e̲l̲s̲e̲ apd:= d20 × Ordinal number (n) +
                    Address (n) +
                    (i̲f̲ Dynamic (n) t̲h̲e̲n̲ d18 e̲l̲s̲e̲ 0)
               e̲n̲d̲
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                  i̲f̲ Subscrvar (n) t̲h̲e̲n̲ Address description (n);
                  i̲f̲ (last symbol = comma ∨ last symbol = close) ∧
                    ( ¬ Designational (n))
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ Unknown (n) t̲h̲e̲n̲ Macro (SAS);
                     Macro2 (EXITSV, -2 × dimension);
                     apd:= d20 × (i̲f̲ Boolean (n) t̲h̲e̲n̲ 18 e̲l̲s̲e̲
                       i̲f̲ String (n)  t̲h̲e̲n̲ 19 e̲l̲s̲e̲
                       i̲f̲ Formal (n)  t̲h̲e̲n̲ 32 e̲l̲s̲e̲
                       i̲f̲ Real (n)    t̲h̲e̲n̲ 16 e̲l̲s̲e̲ 17)
                       + Ordercounter;
                     type:= i̲f̲ Arithmetic (n) t̲h̲e̲n̲ ar e̲l̲s̲e̲
                       i̲f̲ Boolean (n)    t̲h̲e̲n̲ bo e̲l̲s̲e̲
                       i̲f̲ String (n)     t̲h̲e̲n̲ st e̲l̲s̲e̲
                       i̲f̲ Arbost (n)     t̲h̲e̲n̲ nondes e̲l̲s̲e̲ un;
                     Macro2 (SUBJ, -begin address);
                     i̲f̲ Boolean (n) t̲h̲e̲n̲ Macro (TASB)  e̲l̲s̲e̲
                     i̲f̲ String (n)  t̲h̲e̲n̲ Macro (TASST) e̲l̲s̲e̲
                     i̲f̲ Formal (n)  t̲h̲e̲n̲ Macro (TASU)  e̲l̲s̲e̲
                     i̲f̲ Integer (n) t̲h̲e̲n̲ Macro (TASI)
                     e̲l̲s̲e̲ Macro (TASR);
                     Macro (DECS); Macro2 (SUBJ, -begin address);
                     Macro (FAD)
                  e̲n̲d̲

                  e̲l̲s̲e̲
                  b̲e̲g̲i̲n̲ i̲f̲ Subscrvar (n) t̲h̲e̲n̲ Evaluation of (n);
                     Exprest (type, n); Macro (EXITIS);
                     apd:= mask[type] + begin address
                  e̲n̲d̲
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
               i̲f̲ (last symbol = comma ∨ last symbol = close) ∧
                 ( ¬ in name list)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ type:= ar; apd:= Number descriptor e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                  Arithconstant;
                  i̲f̲ in name list ∧ ( ¬ operator last symbol)
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (TLV, integer label);
                     type:= intlab
                  e̲n̲d̲
                  e̲l̲s̲e̲ Rest of arboolexp (type);
                  Macro (EXITIS);
                  apd:= mask[type] + begin address
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = plus
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ digit last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
                  i̲f̲ last symbol = comma ∨ last symbol = close
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ type:= ar; apd:= Number descriptor e̲n̲d̲
                  e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                     Arithconstant;
                     Rest of arboolexp (type);
                     Macro (EXITIS);
                     apd:= mask[type] + begin address
                  e̲n̲d̲
               e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                  Arboolexp (type);
                  Macro (EXITIS); apd:= mask[type] + begin address
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = minus
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ digit last symbol
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
                  i̲f̲ (last symbol = comma ∨ last symbol = close) ∧
                    small
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ type:= ar;
                     apd:= d20 × 13 + value of constant
                  e̲n̲d̲
                  e̲l̲s̲e̲
                  b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                     Arithconstant; Next primary; Next factor;
                     Macro (NEG); Rest of arboolexp (type);
                     Macro (EXITIS);
                     apd:= mask[type] + begin address
                  e̲n̲d̲
               e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                  Term; Macro (NEG);
                  Rest of arboolexp (type);
                  Macro (EXITIS); apd:= mask[type] + begin address
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = true ∨ last symbol = false
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ type:= bo; n:= last symbol; next symbol;
               i̲f̲ last symbol = comma ∨ last symbol = close
                 t̲h̲e̲n̲ apd:= d20 × 6 + (i̲f̲ n = true t̲h̲e̲n̲ 0 e̲l̲s̲e̲ 1)
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future);
                  Macro2 (TBC, n);
                  Rest of boolexp;
                  Macro (EXITIS);
                  apd:= mask[type] + begin address
               e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Start implicit subroutine (future); Exp (type);
               Macro (EXITIS); apd:= mask[type] + begin address
            e̲n̲d̲
         e̲n̲d̲  Actual parameter;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Start implicit subroutine (future); i̲n̲t̲e̲g̲e̲r̲  future;
         b̲e̲g̲i̲n̲   i̲f̲ future = 0 t̲h̲e̲n̲  Macro2 (JU, future);
            Macro (ENTRIS)
         e̲n̲d̲  Start implicit subroutine;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ Number descriptor;
         b̲e̲g̲i̲n̲   Number descriptor:=
              i̲f̲ small t̲h̲e̲n̲ d20 × 7 + value of constant
            e̲l̲s̲e̲ d20 × (i̲f̲  real number t̲h̲e̲n̲ 4 e̲l̲s̲e̲ 5)
              + address of constant
         e̲n̲d̲  Number descriptor;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Process operator (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  count;
            count:= 0;
            i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲
               next: next symbol; Arithexp; count:= count + 1;
               i̲f̲ last symbol = comma
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro (STACK); g̲o̲t̲o̲ next e̲n̲d̲;
               i̲f̲ last symbol = close
                 t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (361)
            e̲n̲d̲;
            i̲f̲ count ≠ List length (n) t̲h̲e̲n̲ ERRORMESSAGE (363);
            Macro (Operator macro (n))
         e̲n̲d̲  Process operator;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonassignable (apd); i̲n̲t̲e̲g̲e̲r̲  apd;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  rank;
            rank:= apd ÷ d20;
            Nonassignable:= (rank ≠ 15) ∧ (rank - rank ÷ 16 × 16) > 3
         e̲n̲d̲  Nonassignable;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Line;
         b̲e̲g̲i̲n̲   i̲f̲ lnc ≠ last lnc t̲h̲e̲n̲ Line1 e̲n̲d̲  Line;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Line1;
         b̲e̲g̲i̲n̲   i̲f̲ wanted t̲h̲e̲n̲ b̲e̲g̲i̲n̲ last lnc:= lnc; Macro2 (LNC, lnc) e̲n̲d̲
         e̲n̲d̲  Line1;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Statement;
         b̲e̲g̲i̲n̲   if statement forbidden:= false; Stat e̲n̲d̲  Statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Unconditional statement;
         b̲e̲g̲i̲n̲   if statement forbidden:= true; Stat e̲n̲d̲  Unconditional statement;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Stat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n, save lnc;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ save lnc:= line counter;
               n:= Identifier;
               i̲f̲ Designational (n)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Label declaration (n); Stat e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ lnc:= save lnc; Line;
                  i̲f̲ Subscrvar (n) ∨ last symbol = colonequal
                    t̲h̲e̲n̲ Assignstat (n)
                  e̲l̲s̲e̲ Procstat (n)
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
               i̲f̲ in name list
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Label declaration (integer label); Stat e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (364)
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ last symbol = goto
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ lnc:= line counter; Line; Gotostat e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = begin
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ save lnc:= line counter; next symbol;
                  i̲f̲ declarator last symbol
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ lnc:= save lnc; Line; Block e̲n̲d̲
                  e̲l̲s̲e̲ Compound tail;
                  next symbol
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = if
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ if statement forbidden
                    t̲h̲e̲n̲ ERRORMESSAGE (365);
                  lnc:= line counter; Line; Ifstat
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = for
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ lnc:= line counter; Line; Forstat;
                  i̲f̲ last symbol = else
                    t̲h̲e̲n̲ ERRORMESSAGE (366)
               e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲ Stat;







         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Gotostat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ n;
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier; Subscripted variable (n);
               i̲f̲ local label (n)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Test for count (n); Macro2 (JU, n) e̲n̲d̲
               e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Designame (n); Macro (JUA) e̲n̲d̲
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Desigexp; Macro (JUA) e̲n̲d̲
         e̲n̲d̲ Gotostat;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Compound tail;
         b̲e̲g̲i̲n̲   Statement;
            i̲f̲ last symbol ≠ semicolon ∧ last symbol ≠ end
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (367);
               skip rest of statement (Statement)
            e̲n̲d̲;
            i̲f̲ last symbol = semi colon
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Compound tail e̲n̲d̲
         e̲n̲d̲ Compound tail;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ifstat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  future1, future2, save lnc, last lnc1;
            future1:= future2:= 0; save lnc:= line counter;
            next symbol; Boolexp; Macro2 (COJU, future1);
            i̲f̲ last symbol = then t̲h̲e̲n̲ next symbol e̲l̲s̲e̲ ERRORMESSAGE (368);
            Unconditional statement;
            i̲f̲ last symbol = else
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (JU, future2); Substitute (future1);
               last lnc1:= last lnc; last lnc:= save lnc;
               next symbol; Statement; Substitute (future2);
               i̲f̲ last lnc > last lnc1 t̲h̲e̲n̲ last lnc:= last lnc1
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Substitute (future1);
               i̲f̲ last lnc > save lnc t̲h̲e̲n̲ last lnc:= save lnc
            e̲n̲d̲
         e̲n̲d̲  Ifstat;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Forstat;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  future, save lnc;
            save lnc:= line counter;
            l0:= 0; next symbol; For list;
            future:= 0; Macro2 (JU, future); i̲f̲ l0 ≠ 0 t̲h̲e̲n̲ Substitute(l0);
            i̲f̲ last symbol = do t̲h̲e̲n̲ next symbol e̲l̲s̲e̲ ERRORMESSAGE (369);
            Increase status (increment); for count:= for count + 1;
            Statement;
            Increase status (- increment); for count:= for count - 1;
            i̲f̲ last lnc < 0 ∨ lnc ≠ save lnc
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ lnc:= save lnc; Line1 e̲n̲d̲;
            Macro2 (LJU,status); Substitute (future)
         e̲n̲d̲  Forstat;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Store preparation;
         b̲e̲g̲i̲n̲   i̲f̲ Subscrvar (controlled variable) t̲h̲e̲n̲ Macro2 (SUBJ, - 12)
              e̲l̲s̲e̲
            i̲f̲  Formal (controlled variable)
              t̲h̲e̲n̲ Macro2 (DOS2, controlled variable)
         e̲n̲d̲  Store preparation;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Store macro;
         b̲e̲g̲i̲n̲   i̲f̲  Subscrvar (controlled variable)
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Formal (controlled variable)  t̲h̲e̲n̲ Macro (STFSU)
                 e̲l̲s̲e̲
               i̲f̲ Integer (controlled variable) t̲h̲e̲n̲ Macro (STSI)
               e̲l̲s̲e̲ Macro (STSR);
               Macro2 (DECB, 2)
            e̲n̲d̲
              e̲l̲s̲e̲ i̲f̲ Formal (controlled variable)
              t̲h̲e̲n̲ Macro2 (DOS3, controlled variable)
              e̲l̲s̲e̲ i̲f̲ Integer (controlled variable)
              t̲h̲e̲n̲ Macro2 (STI, controlled variable)
            e̲l̲s̲e̲ Macro2 (STR, controlled variable)
         e̲n̲d̲  Store macro;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Take macro;
         b̲e̲g̲i̲n̲   i̲f̲ Subscrvar (controlled variable)
              t̲h̲e̲n̲ Macro2 (SUBJ, - l1)
            e̲l̲s̲e̲ Arithname (controlled variable)
         e̲n̲d̲  Take macro;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ For list;
         b̲e̲g̲i̲n̲ i̲f̲ letter last symbol
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ controlled variable:= Identifier;
               i̲f̲ Nonarithmetic (controlled variable)
                 t̲h̲e̲n̲ ERRORMESSAGE (370);
               i̲f̲ Subscrvar (controlled variable)
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ l3:= 0; Macro2 (JU, l3);
                  l4:= Order counter;
                  Address description (controlled variable);
                  Macro2 (EXITSV, 1 - 2 × dimension);
                  l1:= Order counter;
                  Macro2 (SUBJ, - l4);
                  i̲f̲ Formal (controlled variable)  t̲h̲e̲n̲ Macro (TSCVU)
                    e̲l̲s̲e̲
                  i̲f̲ Integer (controlled variable) t̲h̲e̲n̲ Macro (TISCV)
                  e̲l̲s̲e̲ Macro (TRSCV);
                  l2:= Order counter;
                  Macro2 (SUBJ, - l4); Macro (FADCV);
                  Substitute (l3)
               e̲n̲d̲
                 e̲l̲s̲e̲ i̲f̲ Function (controlled variable)
                 t̲h̲e̲n̲ ERRORMESSAGE (371);
               i̲f̲ last symbol ≠ colonequal t̲h̲e̲n̲ ERRORMESSAGE (372);




               list: l3:= Order counter;
               Macro2 (TSIC, 0); Macro2 (SSTI, status);
               l4:= Order counter;
               Store preparation;
               next symbol; Arithexp;
               i̲f̲ last symbol = comma ∨ last symbol = do
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Store macro; Macro2 (JU, l0);
                  Substitute (l3)
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = while
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Store macro;
                  next symbol; Boolexp;
                  Macro2 (YCOJU, l0); Subst2 (l4, l3)
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ last symbol = step
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ l5:= 0; Macro2 (JU, l5); l4:= Order counter;
                  next symbol; complicated:= false; Arithexp;
                  complex step element:=
                    complicated ∨ Order counter> l4 + 1;
                  i̲f̲ complex step element t̲h̲e̲n̲  Macro (EXIT);
                  Substitute (l3);
                  Store preparation; Take macro; Macro (STACK);
                  i̲f̲ complex step element t̲h̲e̲n̲  Macro2 (SUBJ, - l4)
                  e̲l̲s̲e̲  Macro2 (DO, l4);
                  Macro (ADD);
                  Substitute (15);
                  Store macro;
                  i̲f̲ Subscrvar (controlled variable) ∨
                    Formal (controlled variable)
                    t̲h̲e̲n̲ Take macro;
                  Macro (STACK);
                  i̲f̲ last symbol = until
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arithexp e̲n̲d̲
                  e̲l̲s̲e̲ ERRORMESSAGE (373);
                  Macro (TEST1);
                  i̲f̲ complex step element t̲h̲e̲n̲ Macro2 (SUBJ, - l4)
                  e̲l̲s̲e̲ Macro2 (DO, l4);
                  Macro (TEST2); Macro2 (YCOJU, l0)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (374);
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ list
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (375)
         e̲n̲d̲  For list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Switch declaration;
         b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲  m;
            next symbol;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ switch identifier:= Identifier;
               number of switch elements:= List length (switch identifier);
               i̲f̲ last symbol = colonequal
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲
                    sword list[1 : number of switch elements];
                  switch list count:= 0; in switch declaration:= true;
                  next: switch list count:= switch list count + 1;
                  next symbol;
                  i̲f̲ letter last symbol
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ m:= Identifier;
                     i̲f̲ Nondesignational (m) t̲h̲e̲n̲ ERRORMESSAGE (376);
                     i̲f̲ Subscrvar (m)
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ sword:= -45613055 + Order counter;
                        Subscripted variable (m); Macro (EXIT)
                     e̲n̲d̲
                     e̲l̲s̲e̲
                       sword:= (i̲f̲ Formal (m)
                       t̲h̲e̲n̲ -33685503
                     e̲l̲s̲e̲ 4718592 + (i̲f̲ Dynamic (m)
                       t̲h̲e̲n̲ function digit
                     e̲l̲s̲e̲ 0)) +
                       Address (m)
                  e̲n̲d̲
                    e̲l̲s̲e̲
                  i̲f̲ digit last symbol
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ Unsigned number;
                     i̲f̲  in name list
                       t̲h̲e̲n̲  sword:= 4718592 +
                       (i̲f̲ Dynamic (integer label)
                       t̲h̲e̲n̲ function digit
                     e̲l̲s̲e̲ 0) +
                       Address (integer label)
                     e̲l̲s̲e̲ ERRORMESSAGE (377)
                  e̲n̲d̲
                  e̲l̲s̲e̲
                  b̲e̲g̲i̲n̲ sword:= - 45613055 + Order counter;
                     Desigexp; Macro (EXIT)
                  e̲n̲d̲;




                  i̲f̲ switch list count > number of switch elements
                    t̲h̲e̲n̲ ERRORMESSAGE (378);
                  sword list[switch list count]:= sword;
                  i̲f̲ last symbol= comma t̲h̲e̲n̲ g̲o̲t̲o̲ next;
                  i̲f̲ switch list count < number of switch elements
                    t̲h̲e̲n̲ ERRORMESSAGE (379);
                  Mark position in name list (switch identifier);
                  in switch declaration:= false;
                  Macro2 (CODE, number of switch elements);
                  m:= 0;
                  next sword: i̲f̲ m < switch list count ∧
                    m < number of switch elements
                    t̲h̲e̲n̲ b̲e̲g̲i̲n̲ m:= m + 1; sword:= sword list[m];
                     Macro2 (CODE, sword); g̲o̲t̲o̲ next sword
                  e̲n̲d̲
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (380)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (381)
         e̲n̲d̲  Switch declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Array declaration;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, count;
            next symbol; lnc:= line counter; Line;
            n:= Identifier; dimension:= List length (n); count:= 1;
            next:   i̲f̲ last symbol = comma t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Identifier;
               count:= count + 1; g̲o̲t̲o̲ next
            e̲n̲d̲;
            i̲f̲ last symbol = sub   t̲h̲e̲n̲ b̲e̲g̲i̲n̲ in array declaration:= true;
               Bound pair list;
               in array declaration:= false
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (382);
            Macro2 (TNA, count); Macro2 (TDA, dimension);
            Macro2 (TAA, n); Macro (arr decla macro);
            i̲f̲ last symbol = comma t̲h̲e̲n̲ Array declaration
         e̲n̲d̲  Array declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Bound pair list;
         b̲e̲g̲i̲n̲   next symbol; Arithexp; Macro (STACK);
            i̲f̲ last symbol = colon t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; Arithexp;
               Macro (STACK)
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (383);
            i̲f̲ last symbol = comma t̲h̲e̲n̲ Bound pair list
              e̲l̲s̲e̲ i̲f̲ last symbol = bus
              t̲h̲e̲n̲ next symbol
            e̲l̲s̲e̲ ERRORMESSAGE (384)
         e̲n̲d̲  Bound pair list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Procedure declaration;
         b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲  n, f, count, save lnc;
            next symbol; f:= n:= Identifier;
            Skip parameter list; skip value list; skip specification list;
            i̲f̲ ¬ In library (n) t̲h̲e̲n̲ Mark position in name list (n);
            i̲f̲ in code (n)
              t̲h̲e̲n̲ Translate code
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ i̲f̲ Function (n) t̲h̲e̲n̲ Set inside declaration (n, true);
               entrance block;
               Macro2 (DPTR, display level);
               Macro2 (INCRB, top of display);
               f̲o̲r̲ count:= List length (n) s̲t̲e̲p̲ - 1 u̲n̲t̲i̲l̲ 1 d̲o̲
                  b̲e̲g̲i̲n̲ f:= Next formal identifier(f);
                     i̲f̲ In value list (f)
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ i̲f̲ Subscrvar (f)
                          t̲h̲e̲n̲ Macro (CEN)
                        e̲l̲s̲e̲
                        b̲e̲g̲i̲n̲ i̲f̲ Arithmetic (f)
                             t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Integer (f)
                                t̲h̲e̲n̲ Macro (CIV)
                              e̲l̲s̲e̲ Macro (CRV)
                           e̲n̲d̲
                             e̲l̲s̲e̲ i̲f̲ Boolean (f) t̲h̲e̲n̲ Macro (CBV)
                             e̲l̲s̲e̲ i̲f̲ String (f)  t̲h̲e̲n̲ Macro (CSTV)
                           e̲l̲s̲e̲ Macro (CLV)
                        e̲n̲d̲
                     e̲n̲d̲
                       e̲l̲s̲e̲ i̲f̲ Assigned to (f) t̲h̲e̲n̲ Macro (CLPN)
                     e̲l̲s̲e̲ Macro (CEN)
                  e̲n̲d̲;
               Macro2 (TDL, display level);
               Macro2 (ENTRPB, local space);
               Label list; f:= n;
               f̲o̲r̲  count:= List length (n) s̲t̲e̲p̲ - 1 u̲n̲t̲i̲l̲ 1 d̲o̲
                  b̲e̲g̲i̲n̲ f:= Next formal identifier (f);
                     i̲f̲ In value list (f) ∧ Subscrvar (f)
                       t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (TAA, f);
                        i̲f̲ Integer (f) t̲h̲e̲n̲ Macro (TIAV)
                        e̲l̲s̲e̲ Macro (TAV)
                     e̲n̲d̲
                  e̲n̲d̲;




               save lnc:= last lnc; last lnc:= - line counter;
               Save and restore lnc (SLNC, n);
               i̲f̲ last symbol = begin
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; i̲f̲ declarator last symbol
                    t̲h̲e̲n̲ Declaration list;
                  Compound tail; next symbol
               e̲n̲d̲
               e̲l̲s̲e̲ Statement;
               lnc:= last lnc:= save lnc;
               i̲f̲ Function (n)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Set inside declaration (n, false);
                  f:= Local position (n);
                  i̲f̲ Arithmetic (f) t̲h̲e̲n̲ Arithname (f) e̲l̲s̲e̲
                  i̲f̲ Boolean (f) t̲h̲e̲n̲ Boolname (f)
                  e̲l̲s̲e̲ b̲e̲g̲i̲n̲ Stringname(f); Macro (LOS) e̲n̲d̲
               e̲n̲d̲;
               Save and restore lnc (RLNC, n);
               i̲f̲ use of counter stack t̲h̲e̲n̲ Macro (EXITPC)
               e̲l̲s̲e̲ Macro (EXITP);
               exit block
            e̲n̲d̲
         e̲n̲d̲  Procedure declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Save and restore lnc (macro, n); i̲n̲t̲e̲g̲e̲r̲  macro, n;
         b̲e̲g̲i̲n̲  i̲f̲ wanted ∧ Function (n) t̲h̲e̲n̲ Macro2 (macro, Local position1 (n))
         e̲n̲d̲  Save and restore lnc;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Block;
         b̲e̲g̲i̲n̲   entrance block;
            Macro2 (TBL, display level); Macro2 (ENTRB, local space);
            Label list; Declaration list; Compound tail;
            i̲f̲ use of counter stack t̲h̲e̲n̲ Macro2 (EXITC, display level)
            e̲l̲s̲e̲ Macro2 (EXITB, display level);
            exit block
         e̲n̲d̲  Block;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Declaration list;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ future, arr dec;
            future:= arr dec:= 0;
            next:   i̲f̲ type declarator last symbol t̲h̲e̲n̲ skip type declaration
              e̲l̲s̲e̲
            i̲f̲ arr declarator last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲  i̲f̲ future ≠ 0
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Substitute (future);
                  future:= 0
               e̲n̲d̲;
               arr dec:= 1; Array declaration
            e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲ i̲f̲ future = 0 t̲h̲e̲n̲ Macro2 (JU, future);
               i̲f̲ last symbol = switch t̲h̲e̲n̲ Switch declaration
               e̲l̲s̲e̲ Procedure declaration
            e̲n̲d̲;
            i̲f̲ last symbol = semicolon t̲h̲e̲n̲ next symbol
            e̲l̲s̲e̲ ERRORMESSAGE (385);
            i̲f̲ declarator last symbol  t̲h̲e̲n̲ g̲o̲t̲o̲ next;
            i̲f̲ future ≠ 0  t̲h̲e̲n̲ Substitute (future);
            i̲f̲ arr dec ≠ 0 t̲h̲e̲n̲ Macro2 (SWP, display level)
         e̲n̲d̲  Declaration list;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Label list;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n, count;
            count:= Number of local labels;
            i̲f̲ count > 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2 (DECB, 2 × count);
               Macro2 (LAD, display level);
               n:= 0; f̲o̲r̲ count:= count s̲t̲e̲p̲ - 1 u̲n̲t̲i̲l̲ 1 d̲o̲
                  b̲e̲g̲i̲n̲ next: n:= Next local label (n);
                     i̲f̲ Super local (n) t̲h̲e̲n̲ g̲o̲t̲o̲ next;
                     i̲f̲ count = 1 t̲h̲e̲n̲ Macro2 (LAST, n)
                     e̲l̲s̲e̲ Macro2 (NIL, n)
                  e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲  Label list;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Program;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  n;
            i̲f̲ letter last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ n:= Identifier;
               i̲f̲ last symbol = colon
                 t̲h̲e̲n̲ Label declaration (n);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ digit last symbol
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Unsigned number;
               i̲f̲ in name list ∧ last symbol = colon
                 t̲h̲e̲n̲ Label declaration (integer label);
               Program
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ last symbol = begin
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol;
               i̲f̲ declarator last symbol t̲h̲e̲n̲ Block
               e̲l̲s̲e̲ Compound tail;
               Macro (END)
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ next symbol; Program e̲n̲d̲
         e̲n̲d̲  Program;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Label declaration (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   last lnc:= - line counter;
            i̲f̲ Subscrvar (n)       t̲h̲e̲n̲ b̲e̲g̲i̲n̲ ERRORMESSAGE (388);
               Subscripted variable (n)
            e̲n̲d̲
            e̲l̲s̲e̲ Mark position in name list (n);
            i̲f̲ last symbol = colon t̲h̲e̲n̲ next symbol e̲l̲s̲e̲ ERRORMESSAGE (389)
         e̲n̲d̲  Label declaration;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Substitute (address); i̲n̲t̲e̲g̲e̲r̲  address;
         b̲e̲g̲i̲n̲   Subst2 (Order counter, address) e̲n̲d̲  Substitute;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲ Subst2 (address1, address2);
            v̲a̲l̲u̲e̲  address1, address2; i̲n̲t̲e̲g̲e̲r̲  address1, address2;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  instruction, instruct part, address part;
            address2:= abs (address2);
            instruction:= space[prog base + address2];
            instruct part:= instruction ÷ d15 × d15 -
              (i̲f̲ instruction < 0 t̲h̲e̲n̲ 32767 e̲l̲s̲e̲ 0);
            address part:= instruction - instruct part;
            space[prog base + address2]:= instruct part + address1;
            i̲f̲ address part = 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ instruct part = end of list
                 t̲h̲e̲n̲ space[prog base + address2]:=
                 - space[prog base + address2]
            e̲n̲d̲
            e̲l̲s̲e̲ Subst2 (address1, address part)
         e̲n̲d̲  Subst2;






         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Order counter;
         b̲e̲g̲i̲n̲   Macro (EMPTY); Order counter:= instruct counter
         e̲n̲d̲  Order counter;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Macro (macro number); i̲n̲t̲e̲g̲e̲r̲  macro number;
         b̲e̲g̲i̲n̲  Macro2 (macro number, parameter) e̲n̲d̲  Macro;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Macro2 (macro number, metaparameter);
            i̲n̲t̲e̲g̲e̲r̲  macro number, metaparameter;
         b̲e̲g̲i̲n̲   macro:= i̲f̲ macro number < 512 t̲h̲e̲n̲ macro list[macro number]
            e̲l̲s̲e̲ macro number;
            parameter:= metaparameter;
            i̲f̲ state = 0
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ macro = STACK t̲h̲e̲n̲ state:= 1
                 e̲l̲s̲e̲
               i̲f̲ Simple arithmetic take macro t̲h̲e̲n̲ Load (3)
               e̲l̲s̲e̲
                 Produce (macro, parameter)
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ state = 1
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Load (2);
               i̲f̲ ¬ Simple arithmetic take macro
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Produce (STACK, parameter); Unload e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ state = 2
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ Optimizable operator t̲h̲e̲n̲ Optimize
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ Produce (STACK, parameter); state:= 3;
                  Macro2 (macro, parameter)
               e̲n̲d̲
            e̲n̲d̲
              e̲l̲s̲e̲
            i̲f̲ state = 3
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ macro = NEG t̲h̲e̲n̲ Optimize
               e̲l̲s̲e̲
               b̲e̲g̲i̲n̲ Unload; Macro2 (macro, parameter) e̲n̲d̲
            e̲n̲d̲;
            i̲f̲ Forward jumping macro ∧ metaparameter ≤ 0
              t̲h̲e̲n̲ Assign (metaparameter)
         e̲n̲d̲  Macro2;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Load (state i); i̲n̲t̲e̲g̲e̲r̲  state i;
         b̲e̲g̲i̲n̲  stack0:= macro; stack1:= parameter; state:= state i e̲n̲d̲  Load;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Unload;
         b̲e̲g̲i̲n̲   Produce (stack0, stack1); state:= 0 e̲n̲d̲  Unload;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Optimize;
         b̲e̲g̲i̲n̲  stack0:= tabel[5 × Opt number (macro) + Opt number (stack0)];
            Unload
         e̲n̲d̲  Optimize;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Assign (metaparameter); i̲n̲t̲e̲g̲e̲r̲  metaparameter;
         b̲e̲g̲i̲n̲  metaparameter:= - (instruct counter - 1) e̲n̲d̲  Assign;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Produce (macro, parameter); i̲n̲t̲e̲g̲e̲r̲  macro, parameter;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  number, par number, entry, count;
            i̲f̲ macro = EMPTY t̲h̲e̲n̲
              e̲l̲s̲e̲
            i̲f̲ macro = CODE
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ space[prog base + instruct counter]:= parameter;
               instruct counter:= instruct counter + 1;
               test pointers
            e̲n̲d̲
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ number:= Instruct number (macro);
               par number:= Par part (macro);
               entry:= Instruct part (macro) - 1;
               i̲f̲ par number > 0
                 t̲h̲e̲n̲ Process parameter (macro, parameter);
               Process stack pointer (macro);
               f̲o̲r̲ count:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ number d̲o̲
                    Produce (CODE, instruct list[entry + count] +
                    (i̲f̲ count = par number
                    t̲h̲e̲n̲ parameter e̲l̲s̲e̲ 0))
            e̲n̲d̲
         e̲n̲d̲  Produce;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Process stack pointer (macro); i̲n̲t̲e̲g̲e̲r̲  macro;
         b̲e̲g̲i̲n̲   i̲f̲ ¬ in code body
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲  reaction;
               reaction:= B reaction (macro);
               i̲f̲ reaction < 9
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ b:= b + reaction - 4;
                  i̲f̲ b > max depth t̲h̲e̲n̲ max depth:= b
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ reaction = 10 t̲h̲e̲n̲ b:= 0
                 e̲l̲s̲e̲
               i̲f̲ reaction = 11 t̲h̲e̲n̲ b:= b - 2 × (dimension - 1)
                 e̲l̲s̲e̲
               i̲f̲ reaction = 12
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ ecount = 0
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ ret level:= b;
                     ret max depth:= max depth;
                     b:= 0; max depth:= max depth isr
                  e̲n̲d̲;
                  ecount:= ecount + 1
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ reaction = 13
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ macro = EXITSV
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ b > max depth isr
                       t̲h̲e̲n̲ max depth isr:= b;
                     b:= b - 2 × (dimension - 1)
                  e̲n̲d̲;
                  i̲f̲ ecount = 1
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ max depth > max depth isr
                       t̲h̲e̲n̲ max depth isr:= max depth;
                     b:= ret level;
                     max depth:= ret max depth
                  e̲n̲d̲;
                  i̲f̲ ecount > 0 t̲h̲e̲n̲ ecount:= ecount - 1
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ reaction = 14
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ b:= display level + top of display;
                  i̲f̲ b > max display length
                    t̲h̲e̲n̲ max display length:= b;
                  ret max depth:= max depth
               e̲n̲d̲
                 e̲l̲s̲e̲
               i̲f̲ reaction = 15
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ b > max proc level
                    t̲h̲e̲n̲ max proc level:= b;
                  b:= 0; max depth:= ret max depth
               e̲n̲d̲
            e̲n̲d̲
         e̲n̲d̲  Process stack pointer;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Process parameter (macro, parameter);
            i̲n̲t̲e̲g̲e̲r̲  macro, parameter;
         b̲e̲g̲i̲n̲    i̲f̲ Value like (macro)
              t̲h̲e̲n̲
            b̲e̲g̲i̲n̲ i̲f̲ macro = TBC
                 t̲h̲e̲n̲ parameter:= i̲f̲ parameter = true t̲h̲e̲n̲ 0 e̲l̲s̲e̲ 1
                 e̲l̲s̲e̲
               i̲f̲ macro = SWP t̲h̲e̲n̲ parameter:= d9 × parameter
                 e̲l̲s̲e̲
               i̲f̲ macro ≠ EXITSV t̲h̲e̲n̲ parameter:= abs (parameter)
            e̲n̲d̲
            e̲l̲s̲e̲
            b̲e̲g̲i̲n̲ i̲f̲ macro = JU ∨ macro = SUBJ ∨ macro = NIL ∨ macro = LAST
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ i̲f̲ parameter ≤ 0
                    t̲h̲e̲n̲ parameter:= - parameter
                  e̲l̲s̲e̲ parameter:= Program address (parameter)
               e̲n̲d̲
               e̲l̲s̲e̲ parameter:= Address (parameter) +
                 (i̲f̲ Dynamic (parameter)
                 t̲h̲e̲n̲ (i̲f̲ macro = TLV ∨ macro = TAA
                 t̲h̲e̲n̲ function digit
               e̲l̲s̲e̲ i̲f̲ macro = STST
                 t̲h̲e̲n̲ function letter
               e̲l̲s̲e̲ c variant)
               e̲l̲s̲e̲ 0)
            e̲n̲d̲
         e̲n̲d̲ Process parameter;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple arithmetic take macro;
         b̲e̲g̲i̲n̲   Simple arithmetic take macro:= bit string (d1, d0, macro) = 1
         e̲n̲d̲  Simple arithmetic take macro;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Optimizable operator;
         b̲e̲g̲i̲n̲   Optimizable operator:= bit string (d2, d1, macro) = 1
         e̲n̲d̲  Optimizable operator;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Forward jumping macro;
         b̲e̲g̲i̲n̲   Forward jumping macro:= bit string (d3, d2, macro) = 1
         e̲n̲d̲  Forward jumping macro;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Value like (macro); i̲n̲t̲e̲g̲e̲r̲ macro;
         b̲e̲g̲i̲n̲   Value like:= bit string (d4, d3, macro) = 1 e̲n̲d̲  Value like;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Opt number (macro); i̲n̲t̲e̲g̲e̲r̲ macro;
         b̲e̲g̲i̲n̲   Opt number:= bit string (d8, d4, macro) e̲n̲d̲  Opt number;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Instruct number (macro); i̲n̲t̲e̲g̲e̲r̲ macro;
         b̲e̲g̲i̲n̲   Instruct number:= bit string (d10, d8, macro)
         e̲n̲d̲  Instruct number;






         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Par part (macro); i̲n̲t̲e̲g̲e̲r̲  macro;
         b̲e̲g̲i̲n̲   Par part:= bit string (d12, d10, macro) e̲n̲d̲ Par part;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Instruct part (macro); i̲n̲t̲e̲g̲e̲r̲  macro;
         b̲e̲g̲i̲n̲   Instruct part:= bit string (d21, d12, macro) e̲n̲d̲  Instruct part;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  B reaction (macro); i̲n̲t̲e̲g̲e̲r̲  macro;
         b̲e̲g̲i̲n̲   B reaction:= macro ÷ d21 e̲n̲d̲  B reaction;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Code bits (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Code bits:= space[nl base - n] ÷ d19 e̲n̲d̲  Code bits;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Character (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Character:= bit string (d24, d19, space[nl base - n])
         e̲n̲d̲  Character;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithmetic (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ i;
            i:= type bits (n);
            Arithmetic:= Character (n) ≠ 24 ∧ (i < 2 ∨ i = 4)
         e̲n̲d̲  Arithmetic;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Real (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Real:= Character (n) ≠ 24 ∧ type bits (n) = 0 e̲n̲d̲  Real;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Integer (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Integer:= type bits (n) = 1 e̲n̲d̲  Integer;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Boolean (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Boolean:= type bits (n) = 2 e̲n̲d̲  Boolean;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  String (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   String:= type bits (n) = 3 e̲n̲d̲  String;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Designational (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Designational:= type bits (n) = 6 e̲n̲d̲  Designational;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arbost (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Arbost:= Character (n) ≠ 24 ∧ type bits (n) < 6 e̲n̲d̲  Arbost;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Unknown (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Unknown:= type bits (n) = 7 e̲n̲d̲  Unknown;






         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonarithmetic (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ i;
            i:= type bits (n);
            Nonarithmetic:= Character (n) = 24 ∨ i = 2 ∨ i = 3 ∨ i = 6
         e̲n̲d̲  Nonarithmetic;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonreal (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nonreal:= Nonarithmetic (n) ∨ type bits (n) = 1 e̲n̲d̲  Nonreal;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Noninteger (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Noninteger:= Nonarithmetic (n) ∨ type bits (n) = 0
         e̲n̲d̲  Noninteger;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonboolean (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ i;
            i:= type bits (n); Nonboolean:= i ≠ 2 ∧ i ≠ 5 ∧ i ≠ 7
         e̲n̲d̲  Nonboolean;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonstring (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ i;
            i:= type bits (n); Nonstring:= i ≠ 3 ∧ i ≠ 5 ∧ i ≠ 7
         e̲n̲d̲  Nonstring;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nondesignational (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nondesignational:= type bits (n) < 6 e̲n̲d̲  Nondesignational;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nontype (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nontype:= type bits (n) = 6 ∨ (Proc (n) ∧ Nonfunction (n))
         e̲n̲d̲  Nontype;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Simple:= Code bits (n) = 127 ∨ Simple1 (n) e̲n̲d̲  Simple;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Simple1 (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Simple1 := Character (n) ÷ d3 = 0 e̲n̲d̲  Simple1;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Subscrvar (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Subscrvar:= Character (n) ÷ d3 = 1 e̲n̲d̲  Subscrvar;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Proc (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Proc:= Character (n) ÷ d3 > 1 ∧ Code bits (n) ≠ 127 e̲n̲d̲  Proc;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Function (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Function:= Character (n) ÷ d3 = 2 e̲n̲d̲  Function;






         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonsimple (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nonsimple:= ¬ (Simple (n) ∨ (i̲f̲ Proc (n)
              t̲h̲e̲n̲ (Formal (n) ∨ Function (n)) ∧
              List length (n) < 1
            e̲l̲s̲e̲ false ))
         e̲n̲d̲  Nonsirnple;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonsubscrvar (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nonsubscrvar:= Simple1 (n) ∨ Proc (n) e̲n̲d̲  Nonsubscrvar;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonproc (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nonproc:= ¬ (Character (n) ÷ d3 ≥ 2 ∨
              (Formal (n) ∧ Simple1 (n) ∧ ¬ Assigned to (n)))
         e̲n̲d̲  Nonproc;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Nonfunction (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Nonfunction:= ¬ (Function (n) ∨ Formal (n)) e̲n̲d̲  Nonfunction;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Formal (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Formal:= Code bits (n) > 95 e̲n̲d̲  Formal;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  In value list (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   In value list:= Code bits (n) > 63 ∧ ¬ Formal (n)
         e̲n̲d̲  In value list;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Assigned to (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Assigned to:= bit string (d19, d18, space[nl base - n]) = 1
         e̲n̲d̲  Assigned to;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Dynamic (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Dynamic:= Code bits (n) > 63 ∨ Assigned to (n) e̲n̲d̲  Dynamic;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  In library (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   In library:= space[nl base - n - 1] > d25 e̲n̲d̲  In library;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Id1 (k, n); i̲n̲t̲e̲g̲e̲r̲  k, n;
         b̲e̲g̲i̲n̲   Id1:= bit string (2 × k, k, space[nl base - n - 1]) = 1 e̲n̲d̲  Id1;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Operator like (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Operator like:= Id1 (d23, n) e̲n̲d̲  Operator like;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Outside declaration (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Outside declaration:= Id1 (d22, n) e̲n̲d̲  Outside declaration;






         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Ass to function designator (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Ass to function designator:= Id1 (d21, n)
         e̲n̲d̲  Ass to function designator;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Declared (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Declared:= Id1 (d19, n) e̲n̲d̲  Declared;


         B̲o̲o̲l̲e̲a̲n̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Super local (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Super local:= Id1 (d18, n) e̲n̲d̲  Super local;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Change (k, n); i̲n̲t̲e̲g̲e̲r̲  k, n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  i, j;
            i:= space[nl base - n - 1]; j:= i - i ÷ (2 × k) × (2 × k);
            space[nl base - n - 1]:= i + (i̲f̲ j < k t̲h̲e̲n̲ k e̲l̲s̲e̲ -k)
         e̲n̲d̲  Change;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Local position (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲  ¬ Ass to function designator (n) t̲h̲e̲n̲  Change (d21, n);
            Local position:= Local position1 (n)
         e̲n̲d̲  Local position;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Local position1 (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Local position1:= n + 2 e̲n̲d̲  Local position1;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Set inside declaration (n, bool); i̲n̲t̲e̲g̲e̲r̲  n; B̲o̲o̲l̲e̲a̲n̲  bool;
         b̲e̲g̲i̲n̲  Change (d22, n);
            i̲f̲  ¬ (bool ∨ Ass to function designator (n))
              t̲h̲e̲n̲  ERRORMESSAGE (390)
         e̲n̲d̲  Set inside declaration;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Mark position in name list (n); i̲n̲t̲e̲g̲e̲r̲ n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  address;
            i̲f̲ Declared (n)
              t̲h̲e̲n̲ ERRORMESSAGE (391)
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ address:= Program address (n);
               i̲f̲ address ≠ 0 t̲h̲e̲n̲ Substitute (address);
               Change (d19, n)
            e̲n̲d̲
         e̲n̲d̲  Mark position in name list;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Program address (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word, head, m;
            m:= i̲f̲ Code bits (n) = 6 t̲h̲e̲n̲ n + 1 e̲l̲s̲e̲ n;
            word:= space[nl base - m]; head:= word ÷ d18 × d18;
            i̲f̲ ¬ Declared (n)
              t̲h̲e̲n̲ space[nl base - m]:= head + Order counter;
            Program address:= word - head
         e̲n̲d̲  Program address;

         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Address (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  word, tail, level;
            word:= Code bits (n);
            i̲f̲ word > 13 ∧ word < 25
              t̲h̲e̲n̲ tail:= Program address (n)
            e̲l̲s̲e̲ b̲e̲g̲i̲n̲ word:= space[nl base - n];
               tail:= word - word ÷ d18 × d18;
               i̲f̲ Dynamic (n)
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ level:= tail ÷ d9;
                  i̲f̲ level = proc level ∧¬ in switch declaration
                    t̲h̲e̲n̲ tail:= tail + d9 × (63 - level)
               e̲n̲d̲
            e̲n̲d̲;
            Address:= tail
         e̲n̲d̲  Address;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  List length (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   List length:= bit string (d18, d0, space[nl base - n - 1]) - 1
         e̲n̲d̲  List length;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Test for count (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲f̲ space[nl base - n - 1] ÷ d20 > for count
              t̲h̲e̲n̲ ERRORMESSAGE (392)
         e̲n̲d̲  Test for count;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Check dimension (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  i;
            i:= i̲f̲ Code bits (n) = 14 t̲h̲e̲n̲ 1 e̲l̲s̲e̲ List length (n);
            i̲f̲ i ≥ 0 ∧ i ≠ dimension t̲h̲e̲n̲ ERRORMESSAGE (393)
         e̲n̲d̲  Check dimension;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Check list length (f, n); i̲n̲t̲e̲g̲e̲r̲  f, n;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  i, j;
            i:= List length (f);
            j:= i̲f̲ Code bits (n) = 14 t̲h̲e̲n̲ 1 e̲l̲s̲e̲ List length (n);
            i̲f̲ i ≥ 0 ∧ j ≥ 0 ∧ i ≠ j t̲h̲e̲n̲ ERRORMESSAGE (394)
         e̲n̲d̲ Check list length;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Check type (f, n); i̲n̲t̲e̲g̲e̲r̲  f, n;
         b̲e̲g̲i̲n̲   i̲f̲ (Designational (f) ∧ Nondesignational (n)) ∨
              (Arbost (f)        ∧ Nontype (n))          ∨
              (Arithmetic (f)    ∧ Nonarithmetic (n))    ∨
              (Boolean (f)       ∧ Nonboolean (n))       ∨
              (String (f)        ∧ Nonstring (n))
              t̲h̲e̲n̲ ERRORMESSAGE (395)
         e̲n̲d̲ Check type;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Number of local labels;
         b̲e̲g̲i̲n̲   Number of local labels:=
              bit string (d13, d0, space[nl base - block cell pointer - 3])
         e̲n̲d̲  Number of local labels;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next local label (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Next local label:=
              i̲f̲ n = 0 t̲h̲e̲n̲ space[nl base - block cell pointer - 3] ÷ d13
            e̲l̲s̲e̲ next identifier (n)
         e̲n̲d̲  Next local label;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Next formal identifier (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Next formal identifier:=
              next identifier (n + (i̲f̲ Formal (n) ∨ In library (n) ∨
              In value list (n)
              t̲h̲e̲n̲ 2
            e̲l̲s̲e̲ i̲f̲ Function (n) t̲h̲e̲n̲ 9 e̲l̲s̲e̲ 8))
         e̲n̲d̲  Next formal identifier;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Increase status (increment); i̲n̲t̲e̲g̲e̲r̲  increment;
         b̲e̲g̲i̲n̲   space[nl base - block cell pointer - 2]:=
              space[nl base - block cell pointer - 2] + increment
         e̲n̲d̲  Increase status;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Identifier;
         b̲e̲g̲i̲n̲   read identifier; Identifier:= look up e̲n̲d̲  Identifier;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Skip parameter list;
         b̲e̲g̲i̲n̲   i̲f̲ last symbol = open
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ next symbol; skip type declaration;
               i̲f̲ last symbol = close t̲h̲e̲n̲ next symbol
            e̲n̲d̲;
            i̲f̲ lastsymbol = semicolon t̲h̲e̲n̲ next symbol
         e̲n̲d̲  Skip parameter list;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Translate code;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  macro, parameter;
            i̲f̲ last symbol = quote
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ in code body:= true;
               next: next symbol;
               i̲f̲ digit last symbol
                 t̲h̲e̲n̲
               b̲e̲g̲i̲n̲ macro:= unsigned integer (0);
                  i̲f̲ macro < 512 t̲h̲e̲n̲ macro:= macro list[macro];
                  i̲f̲ Par part (macro) > 0
                    t̲h̲e̲n̲
                  b̲e̲g̲i̲n̲ i̲f̲ last symbol = comma
                       t̲h̲e̲n̲ next symbol
                     e̲l̲s̲e̲ ERRORMESSAGE (396);
                     i̲f̲ letter last symbol
                       t̲h̲e̲n̲ parameter:= Identifier
                       e̲l̲s̲e̲
                     i̲f̲ digit last symbol
                       t̲h̲e̲n̲ parameter:= unsigned integer (0)
                       e̲l̲s̲e̲
                     i̲f̲ last symbol = minus
                       t̲h̲e̲n̲
                     b̲e̲g̲i̲n̲ next symbol;
                        i̲f̲ digit last symbol
                          t̲h̲e̲n̲ parameter:=
                          - unsigned integer (0)
                        e̲l̲s̲e̲ ERRORMESSAGE (397)
                     e̲n̲d̲
                     e̲l̲s̲e̲ ERRORMESSAGE (398);
                     Macro2 (macro, parameter)
                  e̲n̲d̲
                  e̲l̲s̲e̲ Macro (macro)
               e̲n̲d̲
               e̲l̲s̲e̲ ERRORMESSAGE (399);
               i̲f̲ last symbol = comma t̲h̲e̲n̲ g̲o̲t̲o̲ next;
               i̲f̲ last symbol = unquote t̲h̲e̲n̲ next symbol
               e̲l̲s̲e̲ ERRORMESSAGE (400);
               in code body:= false
            e̲n̲d̲
            e̲l̲s̲e̲ ERRORMESSAGE (401);
            entrance block; exit block
         e̲n̲d̲ Translate code;






         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Unsigned number;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  p;
            unsigned number;
            i̲f̲ ¬ small
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ p:= 0;
               next: i̲f̲ p = dp0 t̲h̲e̲n̲ g̲o̲t̲o̲ found;
               i̲f̲ space[prog base + p] ≠ value of constant ∨
                 space[prog base + p + 1] ≠ decimal exponent
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ p:= p + 2; g̲o̲t̲o̲ next e̲n̲d̲;
               found: address of constant:= p
            e̲n̲d̲
         e̲n̲d̲  Unsigned number;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Arithconstant;
         b̲e̲g̲i̲n̲   i̲f̲ small t̲h̲e̲n̲ Macro2 (TSIC, value of constant)
              e̲l̲s̲e̲
            i̲f̲ real number t̲h̲e̲n̲ Macro2 (TRC, address of constant)
            e̲l̲s̲e̲ Macro2 (TIC, address of constant)
         e̲n̲d̲  Arithconstant;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Operator macro (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲   Operator macro:= space[nl base - n - 2] e̲n̲d̲  Operator macro;


         p̲r̲o̲c̲e̲d̲u̲r̲e̲  Constant string;
         b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ word, count;
            quote counter:= 1;
            next0:  word:= count:= 0;
            next1:  next symbol;
            i̲f̲ last symbol ≠ unquote
              t̲h̲e̲n̲ b̲e̲g̲i̲n̲ word:= d8 × word + last symbol;
               count:= count + 1;
               i̲f̲ count = 3
                 t̲h̲e̲n̲ b̲e̲g̲i̲n̲ Macro2(CODE, word); g̲o̲t̲o̲ next0 e̲n̲d̲;
               g̲o̲t̲o̲ next1
            e̲n̲d̲;
            next2:  word:= d8 × word + 255; count:= count + 1;
            i̲f̲ count < 3 t̲h̲e̲n̲ g̲o̲t̲o̲ next2;
            Macro2 (CODE, word); quote counter:= 0; next symbol
         e̲n̲d̲  Constant string;


         i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲  Relatmacro;
         b̲e̲g̲i̲n̲   Relatmacro:=  i̲f̲ last symbol = les t̲h̲e̲n̲ LES e̲l̲s̲e̲
              i̲f̲ last symbol = mst t̲h̲e̲n̲ MST e̲l̲s̲e̲
              i̲f̲ last symbol = mor t̲h̲e̲n̲ MOR e̲l̲s̲e̲
              i̲f̲ last symbol = lst t̲h̲e̲n̲ LST e̲l̲s̲e̲
              i̲f̲ last symbol = equ t̲h̲e̲n̲ EQU e̲l̲s̲e̲ UQU
         e̲n̲d̲  Relatmacro;






         main program of translate scan:
         i̲f̲ ¬ text in memory
           t̲h̲e̲n̲ b̲e̲g̲i̲n̲ NEWPAGE;
            PRINTTEXT (“input tape for translate scan”)
         e̲n̲d̲;
         start:= instruct counter; last nlp:= nlp;
         runnumber:= 300; init; increment:= d13;
         state:= b:= max depth:= max depth isr:=
           max display length:= max proc level:= ecount:= 0;
         in switch declaration:= in code body:= false;
         next block cell pointer:= 0;
         entrance block; next symbol;
         Program;
         sum of maxima:= max depth + max depth isr +
           max display length + max proc level;
         Macro2 (CODE, sum of maxima);
         output
      e̲n̲d̲ translate;






      p̲r̲o̲c̲e̲d̲u̲r̲e̲  output;
      b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲  i, k, apostrophe, instruct number, par, address;

         p̲r̲o̲c̲e̲d̲u̲r̲e̲  pucar (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲  i̲n̲t̲e̲g̲e̲r̲ i;
            f̲o̲r̲ i:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ PUNLCR
         e̲n̲d̲  pucar;

         p̲r̲o̲c̲e̲d̲u̲r̲e̲  tabspace (n); i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲  i̲n̲t̲e̲g̲e̲r̲ i, k;
            k:= n ÷ 8;
            f̲o̲r̲ i:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ k d̲o̲ PUSYM (118);
            PUSPACE (n - k × 8)
         e̲n̲d̲  tabspace;

         p̲r̲o̲c̲e̲d̲u̲r̲e̲  absfixp (k); i̲n̲t̲e̲g̲e̲r̲  k;
         b̲e̲g̲i̲n̲  ABSFIXP (4, 0, k); pucar (2) e̲n̲d̲  absfixp;

         p̲r̲o̲c̲e̲d̲u̲r̲e̲  punch (bool); B̲o̲o̲l̲e̲a̲n̲  bool;
         b̲e̲g̲i̲n̲  i̲f̲ bool t̲h̲e̲n̲ PUTEXT (“ true”)
            e̲l̲s̲e̲ PUTEXT (“false”);
            pucar (2)
         e̲n̲d̲  punch;

         p̲r̲o̲c̲e̲d̲u̲r̲e̲  punch octal (n);  v̲a̲l̲u̲e̲ n;  i̲n̲t̲e̲g̲e̲r̲  n;
         b̲e̲g̲i̲n̲  i̲n̲t̲e̲g̲e̲r̲  i, k;
            B̲o̲o̲l̲e̲a̲n̲  minussign;
            minussign:= n < 0; n:= abs (n);
            PUSYM (i̲f̲ minussign t̲h̲e̲n̲ minus e̲l̲s̲e̲ plus);
            PUSYM (apostrophe);
            f̲o̲r̲ i:= d24, d21, d18, d15, d12, d9, d6, d3, d0 d̲o̲
               b̲e̲g̲i̲n̲ k:= n ÷ i; n:= n - k × i; PUSYM (k) e̲n̲d̲;
            PUSYM (apostrophe)
         e̲n̲d̲  punch octal;

         apostrophe:= 120;
         PUNLCR;
         i̲f̲ runnumber = 100
           t̲h̲e̲n̲
         b̲e̲g̲i̲n̲ tabspace (22); PUTEXT (“prescan0”); pucar (2);
            PUTEXT (“erroneous”); PUSPACE (14);
            punch (erroneous); PUTEXT (“text length”);
            PUSPACE (12);
            absfixp (i̲f̲ text in memory t̲h̲e̲n̲ text pointer + 1 e̲l̲s̲e̲ 0);
            PUTEXT (“namelist”); pucar(2);
            f̲o̲r̲ i:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ nlp - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (7); ABSFIXP (4, 0, i); PUSPACE(5);
                  punch octal (space[nl base - i]); PUNLCR
               e̲n̲d̲;
            STOPCODE;
            PUNLCR; PUTEXT (“dp0”); pucar (2);
            PUTEXT (“start”); pucar (2);
            PUTEXT (“program”); pucar (2);




            f̲o̲r̲ i:= prog base s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ instruct counter - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (7); ABSFIXP (4, 0, i);
                  FIXP (16, 0, space[i]); PUNLCR
               e̲n̲d̲;
            RUNOUT; STOPCODE
         e̲n̲d̲
           e̲l̲s̲e̲ i̲f̲ runnumber = 200
           t̲h̲e̲n̲
         b̲e̲g̲i̲n̲ tabspace (38); PUTEXT (“prescan1”); pucar (2);
            tabspace (39); punch (erroneous); tabspace (39);
            absfixp (i̲f̲ text in memory t̲h̲e̲n̲ text pointer + 1 e̲l̲s̲e̲ 0);
            pucar (2);
            f̲o̲r̲ i:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ nlp - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (34); punch octal (space[nl base - i]);
                  PUNLCR
               e̲n̲d̲;
            STOPCODE; pucar (7);
            f̲o̲r̲ i:= prog base s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ instruct counter - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (32); FIXP (13, 0, space[i]); PUNLCR e̲n̲d̲;
            RUNOUT; STOPCODE
         e̲n̲d̲
         e̲l̲s̲e̲
         b̲e̲g̲i̲n̲ tabspace (54); PUTEXT (“translate”); pucar (2);
            tabspace (55); punch (erroneous); tabspace (55);
            absfixp (i̲f̲ text in memory t̲h̲e̲n̲ text pointer + 1 e̲l̲s̲e̲ 0);
            pucar (2);
            f̲o̲r̲ i:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ nlp - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (50); punch octal (space[nl base - i]);
                  PUSPACE (2); ABSFIXP (4, 0, i); PUNLCR
               e̲n̲d̲;
            STOPCODE; PUNLCR;
            tabspace (55); absfixp (dp0);
            tabspace (55); absfixp (start); pucar (2);
            f̲o̲r̲ i:= prog base s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ start - 1 d̲o̲
               b̲e̲g̲i̲n̲ tabspace (48); FIXP(13, 0, space[i]);
                  PUSPACE (2); ABSFIXP (4, 0, i); PUNLCR
               e̲n̲d̲;
            PUNLCR;
            f̲o̲r̲ i:= start s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ instruct counter - 1 d̲o̲
               b̲e̲g̲i̲n̲ k:= space[i]; par:= k ÷ 32768;
                  address:= k - par × 32768;
                  instruct number:= par ÷ 10;
                  par:= par - instruct number × 10;
                  tabspace (48); ABSFIXP (3, 0, instruct number);
                  ABSFIXP (1, 0, par); ABSFIXP (5, 0, address);
                  PUSPACE (2); ABSFIXP (4, 0, i) ; PUNLCR
               e̲n̲d̲
         e̲n̲d̲
      e̲n̲d̲  output;






      main program:
      f̲o̲r̲ n:= 0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ end of memory d̲o̲ space[n]:= 0;
      instruct counter:= prog base:= nlp:= 0;
      text base:= end of memory ÷ 3;
      nl base:= end of memory;


      prescan0;
      i̲f̲ ¬ derroneous
        t̲h̲e̲n̲ b̲e̲g̲i̲n̲  prescan1;
         translate
      e̲n̲d̲;

      endrun:
   e̲n̲d̲
e̲n̲d̲

