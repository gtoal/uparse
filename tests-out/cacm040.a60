p̲r̲o̲c̲e̲d̲u̲r̲e̲ CRITICALPATH (n, I, J, DIJ, ES, LS, EF, LF, TF, FF); 
     i̲n̲t̲e̲g̲e̲r̲ n; 
     i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ I, J, DIJ, ES, LS, EF, LF, TF, FF;  

     c̲o̲m̲m̲e̲n̲t̲

     ALGORITHM 40 CRITICAL PATH SCHEDULING 

     B. LEAVENWORTH 
     American Machine & Foundry Co., Greenwich, Conn. 

     Given the total number of jobs n of a project, the vector pair I[k],
     J[k] representing the kth job, which is thought of as an arrow
     connecting event I[k] to event Jk[Ik < Jk, k = 1 --", n], and a
     duration vector DIJ[k], CRITICALPATH determines:

     The earliest starting time ES[k], latest starting time LS[k], 
     earliest completion time EF[k], latest completion time LF[k], 
     the total float TF[k], and the free float FF[k]. 

     I1 must be 1 and the Ik, Jk must be in ascending order. 

     For example, if the first three jobs are labeled (1, 2), (1, 3), (3, 4),
     then the I, J vectors are (1, 1, 3) and (2, 3, 4) respectively. 

     The critical path is given by each arrow whose total float is zero. 	

     The following non-local labels are used for exits: 
     purl-I[k] not less than Jk, out2-I[k] out of sequence, out3-Ik missing.


     REFERENCES:

     (1) JAMES E. KELLEY, JR. and MORGAN R. WALKER, "Critical-Path Planning and Scheduling," 
     1959 Proceedings of the Eastern Joint Computer Conference.

     (2) M. C. FRISHBERG, "Least Cost Estimating and Scheduling -- Scheduling Phase Only," 
     IBM 650 Program Library File No. 10.3.005. ; 

  b̲e̲g̲i̲n̲ 
     i̲n̲t̲e̲g̲e̲r̲ k, index, max, min; 
     i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ ti, te [1:11] ;
   index := 1; 	
     f̲o̲r̲ k := 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ 
        b̲e̲g̲i̲n̲ 
           i̲f̲ I[k] ≥ J[k] t̲h̲e̲n̲ g̲o̲ t̲o̲ purl ;
         i̲f̲ I[k] < index t̲h̲e̲n̲ g̲o̲ t̲o̲ out2 ;
         i̲f̲ I[k] > index ∧ I[k] ≠ index + 1 t̲h̲e̲n̲ g̲o̲ t̲o̲ out3 ;
         i̲f̲ I[k] = index + 1 t̲h̲e̲n̲ index := I[k]; 
           C: 	e̲n̲d̲;
   f̲o̲r̲ k := 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ 
        ti[k] := te[k] := 0; 
     f̲o̲r̲ k := 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ 
        b̲e̲g̲i̲n̲ 
           max := ti[I[k]] + DIJ[k]; 
           i̲f̲ ti[J[k]] = 0 ∨ ti[J[k]] < max t̲h̲e̲n̲ ti[J[k]] := max; 
           A: 		e̲n̲d̲ ti; 
     te[J[n]] := ti[J[n]]; 
     f̲o̲r̲ k := n s̲t̲e̲p̲ -1 	u̲n̲t̲i̲l̲ 1 d̲o̲ 	
        b̲e̲g̲i̲n̲ 
           min := te[J[k]] - DIJ[k]; 
           i̲f̲ te[I[k]] = 0 ∧ te[I[k]] > rain 	t̲h̲e̲n̲ te[I[k]]:= rain; 
           B: 	e̲n̲d̲ te; 
     f̲o̲r̲ k := 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ 
        b̲e̲g̲i̲n̲ 
           ES[k] := ti[I[k]]; 
           LS[k] := te[J[k]] - DIJ[k]; 
           EF[k] := ti[I[k]] + DIJ[k]; 
           LF[k] := te[J[k]]; 
           TF[k] := te[J[k]] - ti[I[k]] - DIJ[k]; 
           FF[k] := ti[J[k]] - ti[I[k]] - DIJ[k] 
        e̲n̲d̲ 
  e̲n̲d̲ CRITICALPATH;
