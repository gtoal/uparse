b̲e̲g̲i̲n̲

c̲o̲m̲m̲e̲n̲t̲ ****************************************************************
        ***                                                          ***
        *** This calculation of PI uses the Bailey-Borwein-Plouffe   ***
        *** algorithm, whereby PI = Sum [K=0 to Inf] (1/16)**K       ***
        ***         *( 4/(8*K+1) -2/(8*K+4) -1/(8K+5) -1/(8*K+6) ).  ***
        *** At each iteration, the four arrays BFrac1 to BFrac4 are  ***
        *** populated with the binary expansions of the fractional   ***
        *** terms, then these are combined, and finally shifted by an***
        *** amount corresponding to the factor (1/16)**K, upon which ***
        *** this is added to the accumulating total.  Hence we get   ***
        *** an answer of gradually increasing precision, viewable    ***
        *** by setting bit 2 of the console word generator.          ***
        ***                                                          ***
        *** Each iteration increases the precision by slightly       ***
        *** better than 4 binary bits, so we can estimate the decimal***
        *** precision correspondingly at each iteration, or otherwise***
        *** by simply comparing results of consecutive iterations.   ***
        ***                                                          ***
        *** Diagnostics  Setting BLine causes binary dump of some    ***
        *** ===========      arrays - to see all remove the Comments ***
        ***              Setting One on the word generator causes a  ***
        ***                  trace of significant operations         ***
        ***              Setting Two on the word generator shows the ***
        ***                  decimal accumulation at EVERY iteration ***
        ***                                                          ***
        *** Author:  Bob Firth                                       ***
        *** Written: June,July 2010                                  ***
        *** Contact: General_Factotum@hotmail.co.uk                  ***
        ***                                                          ***
        *** Comment: The machine code of the 803/503 is not          ***
        ***          particularly suited to multi-word precision     ***
        ***          arithmetic, mainly because of the absence of    ***
        ***          double-length add and subtract.  Nevertheless   ***
        ***          it is possible to program around this by        ***
        ***          detecting and handling overflow while processing***
        ***          the lower order word.                           ***
        ***                                                          ***
        ****************************************************************;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ PWRDS(Ident,AStart,ASize);
        v̲a̲l̲u̲e̲   AStart,ASize;
        i̲n̲t̲e̲g̲e̲r̲ AStart,ASize;
        s̲t̲r̲i̲n̲g̲  Ident;

c̲o̲m̲m̲e̲n̲t̲ *** Dumps binary representation of elements of array         ***
        *** starting at AStart, length 1+ASize                       ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ BLine,NoBits,NoCHs,Count,Word;
        s̲w̲i̲t̲c̲h̲ S:=SPACE,LOOP,NEXT,EXIT,GETOUT;
        BLine   :=524288;

        Elliott(7,0,0     ,0,0,3,BLine );
        Elliott(4,2,GETOUT,0,0,0,0     );

        f̲o̲r̲ Count:=0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ ASize d̲o̲ b̲e̲g̲i̲n̲
                Elliott(7,0,0     ,0,0,3,BLine );
                Elliott(4,2,EXIT  ,0,0,0,0     );
                PRINT(`\n',Ident,sameline,digits(3),Count,`) ');
                NOBITS  :=-39;
                Elliott(3,0,AStart,0,0,4,Count);
                Elliott(2,0,4     ,1,3,0,0     );
                Elliott(2,0,Word  ,0,0,0,0     );
        SPACE:  PRINT(` ');
                NOCHS   :=-2;
        LOOP:   ELLIOTT(3,2,NoBits,0,4,2,EXIT  );
                i̲f̲ WORD l̲e̲s̲s̲ 0 t̲h̲e̲n̲ PRINT(`1');
                i̲f̲ WORD g̲r̲e̲q̲ 0 t̲h̲e̲n̲ PRINT(`0');
                ELLIOTT(3,0,Word  ,0,5,5,1     );
                ELLIOTT(2,0,Word  ,0,4,3,NEXT  );
        NEXT:   ELLIOTT(3,2,NoCHs ,0,4,2,SPACE );
                ELLIOTT(4,0,LOOP  ,0,0,0,0     );
        EXIT:                              e̲n̲d̲;
GETOUT:
e̲n̲d̲ PWRDS;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ INTDV(DVDend,DIVsor,AStart,ASize);
        v̲a̲l̲u̲e̲   DVDend,DIVsor,AStart,ASize;
        i̲n̲t̲e̲g̲e̲r̲ DVDend,DIVsor,AStart,ASize;

c̲o̲m̲m̲e̲n̲t̲ *** Divides integer word DVDend by integer word DIVsor,      ***
        *** result is stored in array ARRAY[0:ASize]                 ***
        *** where whole part of quotient goes to ARRAY[0]            ***
        *** and fractional part populates rest of array.             ***
        *** Array position and length given by AStart and ASize+1    ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Maxpos,One,Remain,Count,Point;
        s̲w̲i̲t̲c̲h̲ S:=NOTRAC,LOOP;
        Maxpos  :=274877906943;
        One     :=1;

        Elliott(7,0,0     ,0,0,3,One   );
        Elliott(4,2,NOTRAC,0,0,0,0     );
        PRINT(`Dividing ',SAMELINE,DIGITS(1),DVDend,` by ',DIGITS(5),DIVsor);
NOTRAC: Elliott(2,6,Remain,0,2,6,Count );
        Elliott(3,0,AStart,0,2,0,Point );
        Elliott(3,0,DVDend,0,2,0,4     );
        Elliott(5,0,38    ,0,0,0,0     );
LOOP:   Elliott(3,0,Remain,0,5,6,DIVsor);
        Elliott(0,0,Point ,1,2,0,0     );
        Elliott(5,2,DIVsor,0,5,7,0     );
        Elliott(0,7,4     ,0,0,3,Maxpos);
        Elliott(2,0,Remain,0,2,6,4     );
        Elliott(2,2,Point ,0,0,0,0     );
        Elliott(3,2,Count ,0,0,5,ASize );
        Elliott(5,1,0     ,0,4,1,LOOP  );
e̲n̲d̲ INTDV;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ COMBI(T1Strt,T2Strt,T3Strt,T4Strt,TTStrt,Max);
        v̲a̲l̲u̲e̲   T1Strt,T2Strt,T3Strt,T4Strt,TTStrt,Max;
        i̲n̲t̲e̲g̲e̲r̲ T1Strt,T2Strt,T3Strt,T4Strt,TTStrt,Max;

c̲o̲m̲m̲e̲n̲t̲ *** Take (binary fraction at) T1Strt, subtract that at T2Strt***
        *** and at T3Strt and at T4Strt, and put result at TTStrt    ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Maxpos,One,Count,Carry;
        s̲w̲i̲t̲c̲h̲  S:=LOOP,UFLO1,SKIP1,UFLO2,SKIP2,UFLO3,SKIP3,UFLO4,SKIP4;
        Maxpos  :=274877906943;
        One     :=1;

        T1Strt  :=T1Strt+Max;
        T2Strt  :=T2Strt+Max;
        T3Strt  :=T3Strt+Max;
        T4Strt  :=T4Strt+Max;
        TTStrt  :=TTStrt+Max;
        Elliott(3,0,Max   ,0,2,0,Count );
        Elliott(2,6,Carry ,0,2,6,4     );
LOOP:   Elliott(0,0,T1Strt,1,3,0,0     );
        Elliott(0,0,T2Strt,1,0,5,0     );
        Elliott(4,1,UFLO1 ,0,4,0,SKIP1 );
UFLO1:  Elliott(0,3,MaxPos,0,2,2,4     );
SKIP1:  Elliott(0,0,T3Strt,1,0,5,0     );
        Elliott(4,1,UFLO2 ,0,4,0,SKIP2 );
UFLO2:  Elliott(0,3,MaxPos,0,2,2,4     );
SKIP2:  Elliott(0,0,T4Strt,1,0,5,0     );
        Elliott(4,1,UFLO3 ,0,4,0,SKIP3 );
UFLO3:  Elliott(0,3,MaxPos,0,2,2,4     );
SKIP3:  Elliott(0,0,0     ,0,0,5,Carry );
        Elliott(4,1,UFLO4 ,0,4,0,SKIP4 );
UFLO4:  Elliott(0,3,MaxPos,0,2,2,4     );
SKIP4:  Elliott(0,0,TTStrt,1,2,0,0     );
        Elliott(3,6,4     ,0,2,0,Carry );
        Elliott(3,0,One   ,0,2,7,T1Strt);
        Elliott(2,7,T2Strt,0,2,7,T3Strt);
        Elliott(2,7,T4Strt,0,2,7,TTStrt);
        Elliott(0,0,0     ,0,3,7,Count );
        Elliott(0,1,0     ,0,4,1,LOOP  );
e̲n̲d̲ COMBI;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ SHIFT(Expone,TTStrt,SHStrt,Max);
        v̲a̲l̲u̲e̲   Expone,TTStrt,SHStrt,Max;
        i̲n̲t̲e̲g̲e̲r̲ Expone,TTStrt,SHStrt,Max;

c̲o̲m̲m̲e̲n̲t̲ *** Shift contents of array at TTStrt down by Expone*4 bits  ***
        *** and place result at array SHStrt, both length Max        ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Maxpos,One,Count,ShiftB,ShiftL,ShiftR,ShiftW,Source;
        s̲w̲i̲t̲c̲h̲  S:=DONE,NOTRAC,MORE,SHIF1,NONE1,NEXT1,SHIF2,NONE2,NEXT2,NOSHIF,EXIT;
        Maxpos  :=274877906943;
        One     :=1;

        Count   :=Expone d̲i̲v̲ 19;
        ShiftB  :=( Expone - Count*19 )*4;
        ShiftW  :=Count *2;
        ShiftL  :=ShiftR  :=Source  :=0;

        i̲f̲ ShiftB g̲r̲e̲q̲ 60 t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                ShiftW  :=ShiftW +1;
                ShiftL  :=76 - ShiftB;
                g̲o̲t̲o̲ DONE;
                               e̲n̲d̲;
        i̲f̲ ShiftB g̲r̲e̲q̲ 40 t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                ShiftW  :=ShiftW +1;
                ShiftR  :=ShiftB - 38;
                Source  :=1;
                g̲o̲t̲o̲ DONE;
                               e̲n̲d̲;
        i̲f̲ ShiftB g̲r̲e̲q̲ 20 t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                ShiftL  :=38 - ShiftB;
                g̲o̲t̲o̲ DONE;
                               e̲n̲d̲;
        i̲f̲ ShiftB g̲r̲e̲q̲  0 t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                ShiftR  :=ShiftB;
                Source  :=1;
                               e̲n̲d̲;

DONE:   Elliott(7,0,0     ,0,0,3,One   );
        Elliott(4,2,NOTRAC,0,0,0,0     );
        PRINT(`\nShift Parameters',SAMELINE,DIGITS(3),Count,ShiftB,ShiftL,ShiftR,ShiftW,Source);

NOTRAC: Elliott(0,0,0     ,0,2,6,Count );
MORE:   Elliott(3,0,Count ,0,0,5,ShiftW);
        Elliott(4,1,NONE1 ,0,0,4,TTStrt);
        Elliott(2,0,4     ,1,3,0,0     );
SHIF1:  Elliott(5,0,38    ,0,4,0,NEXT1 );
NONE1:  Elliott(0,6,0     ,0,4,0,SHIF1 );
NEXT1:  Elliott(3,0,Count ,0,0,5,ShiftW);
        Elliott(0,5,One   ,0,4,1,NONE2 );
        Elliott(0,4,TTStrt,0,0,0,0     );
        Elliott(2,0,4     ,1,3,0,0     );
SHIF2:  Elliott(4,0,NEXT2 ,0,0,0,0     );
NONE2:  Elliott(0,6,0     ,0,0,0,0     );
NEXT2:  Elliott(0,0,ShiftL,1,5,4,0     );
        Elliott(0,0,ShiftR,1,5,0,0     );
        Elliott(0,3,Maxpos,0,2,0,4     );
        Elliott(3,0,Source,0,4,2,NOSHIF);
        Elliott(5,7,0     ,0,2,0,4     );
NOSHIF: Elliott(3,0,4     ,0,0,0,0     );
        Elliott(0,0,SHStrt,1,2,0,0     );
        Elliott(2,2,SHStrt,0,3,0,Count );
        Elliott(0,4,One   ,0,2,0,Count );
        Elliott(0,5,Max   ,0,0,5,One   );
        Elliott(4,1,MORE  ,0,4,3,EXIT  );
EXIT:
e̲n̲d̲ SHIFT;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ ACCUM(BStart,BSize,TStart,TSize);
        v̲a̲l̲u̲e̲   BStart,BSize,TStart,TSize;
        i̲n̲t̲e̲g̲e̲r̲ BStart,BSize,TStart,TSize;

c̲o̲m̲m̲e̲n̲t̲ *** Add contents of extended 'integer' at BStart size BSize    ***
        *** into extended 'integer' at TStart, size TSize.             ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Maxpos,One,Count,Carry;
        s̲w̲i̲t̲c̲h̲ S:=LOOP,OFLO,SKIP,EXIT;
        Maxpos  :=274877906943;
        One     :=1;

        i̲f̲ BSize NOTEQ TSize t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                PRINT(`\nIllegal parameters to procedure ACCUM');
                g̲o̲t̲o̲ EXIT;
                                  e̲n̲d̲;
        TStart  :=TStart+BSize;
        BStart  :=BStart+BSize;
        Elliott(3,0,BSize ,0,2,0,Count );
        Elliott(2,6,Carry ,0,2,6,4     );
LOOP:   Elliott(0,0,TStart,1,3,0,0     );
        Elliott(0,0,BStart,1,0,4,0     );
        Elliott(4,3,OFLO  ,0,4,0,SKIP  );
OFLO:   Elliott(0,3,MaxPos,0,2,2,4     );
SKIP:   Elliott(0,4,Carry ,0,0,0,0     );
        Elliott(0,0,TStart,1,2,0,0     );
        Elliott(3,6,4     ,0,2,0,Carry );
        Elliott(3,0,One   ,0,2,7,BStart);
        Elliott(0,0,0     ,0,2,7,TStart);
        Elliott(3,7,Count ,0,0,1,0     );
        Elliott(4,1,LOOP  ,0,0,0,0     );
EXIT:
e̲n̲d̲ CBTOD;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ CBTOD(BStart,BSize,DStart,DSize);
        v̲a̲l̲u̲e̲   BStart,BSize,DStart,DSize;
        i̲n̲t̲e̲g̲e̲r̲ BStart,BSize,DStart,DSize;

c̲o̲m̲m̲e̲n̲t̲ *** Converts binary fraction in 'array' at BStart length       ***
        *** 1+BSize 'to' Decimal fraction at DStart length 1+DSize     ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Maxpos,Power,One,BCount,DCount,Carry,Item,Point;
        s̲w̲i̲t̲c̲h̲ S:=START,LOOP,OFLO,SKIP,EXIT;
        Maxpos  :=274877906943;
        Power   :=10000000000;
        One     :=1;

        Elliott(3,0,DSize ,0,2,1,DCount);
START:  Elliott(0,6,BStart,1,1,0,0     );
        Elliott(0,0,DStart,1,2,0,0     );
        Elliott(3,0,DCount,0,4,2,EXIT  );
        Elliott(2,2,DCount,0,2,6,Carry );
        Elliott(3,0,BSize ,0,2,1,BCount);
        Elliott(3,0,BStart,0,0,4,BSize );
        Elliott(2,0,Point ,0,0,0,0     );

LOOP:   Elliott(0,0,Point ,1,3,0,0     );
        Elliott(5,2,power ,0,2,0,4     );
        Elliott(5,7,0     ,0,0,4,Carry );
        Elliott(4,3,OFLO  ,0,4,0,SKIP  );
OFLO:   Elliott(0,3,Maxpos,0,2,2,4     );
SKIP:   Elliott(0,0,Point ,1,2,0,0     );
        Elliott(3,0,4     ,0,2,0,Carry );
        Elliott(3,0,One   ,0,2,7,Point );
        Elliott(3,2,BCOUNT,0,4,1,LOOP  );
        Elliott(2,2,DStart,0,4,0,START );
EXIT:
e̲n̲d̲ CBTOD;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ PDARY(DStart,DSize);
        v̲a̲l̲u̲e̲   DStart,DSize;
        i̲n̲t̲e̲g̲e̲r̲ DStart,DSize;

c̲o̲m̲m̲e̲n̲t̲ *** PRINT(decimal number at DStart, and fractional component ***
        *** at DStart+1, length DSize                                ***
        ****************************************************************);

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ Cols,Count,Word;
        Cols    :=6;
        Elliott(0,0,Dstart,1,3,0,0     );
        Elliott(2,0,Word  ,0,0,0,0     );
        PRINT(`\n',sameline,Digits(1),Word,`.');
        f̲o̲r̲ Count:=1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ DSize d̲o̲ b̲e̲g̲i̲n̲
                Elliott(2,2,Dstart,1,3,0,0     );
                Elliott(2,0,Word  ,0,0,0,0     );
                i̲f̲ ( Count-1 ) = ( ( Count-1 ) d̲i̲v̲ Cols )*Cols t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                        i̲f̲ ( Count-1 ) g̲r̲e̲q̲ 1 t̲h̲e̲n̲ PRINT(`\n   '); e̲n̲d̲;
                PRINT(sameline,leadzero(`0'),Digits(10),Word);
                                           e̲n̲d̲;
e̲n̲d̲ PDARY;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ ESTIM(Expone);
                v̲a̲l̲u̲e̲   Expone;
                i̲n̲t̲e̲g̲e̲r̲ Expone;

c̲o̲m̲m̲e̲n̲t̲ *** Estimate number of decimal places precision available    ***
        *** after term Expone contributed.                           ***
        ****************************************************************;

b̲e̲g̲i̲n̲   r̲e̲a̲l̲    Temp;
        Temp    :=4/(8*Expone+1)-2/(8*Expone+4)-1/(8*Expone+5)-1/(8*Expone+6);
        ESTIM   :=entier((Expone*LN(16)-LN(Temp))/LN(10)+0.5);
e̲n̲d̲ ESTIM;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ TRACE(TEXT);
        s̲t̲r̲i̲n̲g̲  TEXT;

c̲o̲m̲m̲e̲n̲t̲ *** Trace program flow if bit 1 set                          ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ One;
        s̲w̲i̲t̲c̲h̲ S:=NOTRAC;
        One     :=1;

        Elliott(7,0,0     ,0,0,3,One   );
        Elliott(4,2,NOTRAC,0,0,0,0     );
        PRINT(TEXT);
NOTRAC:
e̲n̲d̲ TRACE;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;


p̲r̲o̲c̲e̲d̲u̲r̲e̲ CALPI(MaxTrm,BMax,DMax);
        v̲a̲l̲u̲e̲   MaxTrm,BMax,DMax;
        i̲n̲t̲e̲g̲e̲r̲ MaxTrm,BMax,DMax;

c̲o̲m̲m̲e̲n̲t̲ *** Perform calculation of PI using algorithm described above***
        *** MaxTrm is the number of terms to be calculated           ***
        ***   BMax is words allocated to fractional part of result   ***
        ***   DMax is words allocated (10 digits/word) to decimal    ***
        ***                                         part of result   ***
        ****************************************************************;

b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ BFrac1[0:BMax],BFrac2[0:BMax],BFrac3[0:BMax],BFrac4[0:BMax];
        i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ BFracT[0:BMax],BShift[0:BMax],BReslt[0:BMax],BOutpt[0:BMax];
        i̲n̲t̲e̲g̲e̲r̲ a̲r̲r̲a̲y̲ DOutpt[0:DMax];
        i̲n̲t̲e̲g̲e̲r̲ Two,Count,Term,Expone,EPlace,DWords;
        s̲w̲i̲t̲c̲h̲ S:=SHOW,NOSHOW;
        Two     :=2;

        f̲o̲r̲ Count:=0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ BMax d̲o̲
                BReslt[Count]:=0;

        f̲o̲r̲ Term:=1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ MaxTrm d̲o̲ b̲e̲g̲i̲n̲
        Expone  :=Term-1;
        PRINT(`\nAdding term ',sameline,digits(4),Term);

        INTDV(4,8*Expone+1,ADDRESS(BFrac1),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BFrac1',ADDRESS(BFrac1),BMax);

        INTDV(2,8*Expone+4,ADDRESS(BFrac2),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BFrac2',ADDRESS(BFrac2),BMax);

        INTDV(1,8*Expone+5,ADDRESS(BFrac3),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BFrac3',ADDRESS(BFrac3),BMax);

        INTDV(1,8*Expone+6,ADDRESS(BFrac4),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BFrac4',ADDRESS(BFrac4),BMax);

        TRACE(`\nCombine fractions...');
        COMBI(ADDRESS(BFrac1),ADDRESS(BFrac2),ADDRESS(BFrac3),ADDRESS(BFrac4),ADDRESS(BFracT),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BFracT',ADDRESS(BFracT),BMax);

c̲o̲m̲m̲e̲n̲t̲ TRACE(`\nShift down...');
        SHIFT(Expone,ADDRESS(BFracT),ADDRESS(BShift),BMax);
        PWRDS(`BShift',ADDRESS(BShift),BMax);

        TRACE(`\nAccumulate...');
        ACCUM(ADDRESS(BShift),BMax,ADDRESS(BReslt),BMax);
c̲o̲m̲m̲e̲n̲t̲ PWRDS(`BReslt',ADDRESS(BReslt),BMax);

        i̲f̲ Term g̲r̲e̲q̲ MaxTrm-2 t̲h̲e̲n̲ g̲o̲t̲o̲ SHOW;
        Elliott(7,0,0     ,0,0,3,Two   );
        Elliott(4,2,NOSHOW,0,0,0,0     );
SHOW:   TRACE(`\nConvert to Decimal...');
        f̲o̲r̲ Count:=0 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ BMax d̲o̲ BOutpt[Count]:=BReslt[Count];
        CBTOD(ADDRESS(BOutpt),BMax,ADDRESS(DOutpt),DMax);
        EPlace  :=ESTIM(Expone);
        DWords  :=(EPlace+15) d̲i̲v̲ 10;
        i̲f̲ DWords GR DMax t̲h̲e̲n̲ DWords :=DMax;
        PRINT(SAMELINE,` yields value for PI:-');
        PDARY(ADDRESS(DOutpt),DWords);
        PRINT(`\nEstimated accurate to',sameline,digits(4),EPlace,`  digits\n');
NOSHOW: e̲n̲d̲;

e̲n̲d̲ CALPI;
c̲o̲m̲m̲e̲n̲t̲ ================================================================
        ================================================================
        ================================================================;


b̲e̲g̲i̲n̲   i̲n̲t̲e̲g̲e̲r̲ N,BMax,DMax,Expone,MaxTrm;
        r̲e̲a̲l̲    DTB;
        s̲w̲i̲t̲c̲h̲ S:=LOOP1,LOOP2,ONYERBIKE;
        Reader(2);
         Punch(3);
        Digits(4);

c̲o̲m̲m̲e̲n̲t̲ The most efficient use of array space is when both Binary and Decimal arrays
        hold the same precision, which occurs when DMax = BMax * ( LN(2**39)/LN(10**10))
                                                        = BMax * 1.17402

        To achieve an accuracy of D decimal digits, this is guaranteed by
        using number of iterations given by:     Maxtrm = D * ( LN(10)/LN(16) )
                                                        = D * 0.830482
        where DMax decimal array entries hold 10*DMax digits

        For a more accurate estimate, keep increasing Expone until
        ( Expone*LN(16)-LN(4/(8*Expone+1)-2/(8*Expone+4)-1/(8*Expone+5)-1/(8*Expone+6)) )/LN(10) >D
             and then set MaxTrm :=Expone+1;

        Read N;
        i̲f̲ N l̲e̲s̲s̲e̲q̲ 0 t̲h̲e̲n̲ b̲e̲g̲i̲n̲
                PRINT(`Invalid number');
                g̲o̲t̲o̲ ONYERBIKE;
        e̲n̲d̲;

        DMax    :=( N+9 ) d̲i̲v̲ 10;
        BMax    :=entier( DMax*(10*LN(10))/(39*LN(2)) )+2;

        PRINT(`\nRequired decimal places    ',sameline,N);
        PRINT(`\nArray size, Decimal storage',sameline,DMax);
        PRINT(`\nArray size, Binary storage ',sameline,BMax);
        PRINT(`\nOverall array space reqd.  ',sameline,DMax+8*BMax);

        Expone  :=0;
LOOP1:  Expone  :=Expone+10;
        i̲f̲ ESTIM(Expone) l̲e̲s̲s̲e̲q̲ (N-1) t̲h̲e̲n̲ g̲o̲t̲o̲ LOOP1;

LOOP2:  Expone  :=Expone-1;
        i̲f̲ ESTIM(Expone) g̲r̲e̲q̲   (N+1) t̲h̲e̲n̲ g̲o̲t̲o̲ LOOP2;
        Expone  :=Expone+1;
        Maxtrm  :=Expone+1;
        PRINT(`\nRequired number iterations ',sameline,Maxtrm);

        PRINT(`\fCalculation of PI using',sameline,MaxTrm,` iterations');
        PRINT(`\n=======================================',`\n');

        CALPI(MaxTrm,BMax,DMax);
ONYERBIKE:
e̲n̲d̲;
c̲o̲m̲m̲e̲n̲t̲ ================================================================;
e̲n̲d̲;

