b̲e̲g̲i̲n̲ c̲o̲m̲m̲e̲n̲t̲ eigenvalues of a real symmetric matrix
by the QR method. Algorithm 253, P.A. Businger, CACM 8 (1965) 217;
i̲n̲t̲e̲g̲e̲r̲ n;
n:= read;
b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲ i,j;
r̲e̲a̲l̲ a̲r̲r̲a̲y̲ a[1:n,1:n];
p̲r̲o̲c̲e̲d̲u̲r̲e̲ symmetric QR1(n,g);
v̲a̲l̲u̲e̲ n; i̲n̲t̲e̲g̲e̲r̲ n; a̲r̲r̲a̲y̲ g;
c̲o̲m̲m̲e̲n̲t̲ uses Housholders.s method and the QR algorithm to
find all n eigenvalues of the real symmetric matrix whose lower
triangular part is given in the array g[1:n,1:n]. The computed
eigenvalues are stored as the diagonal elements g[i,i]. The
original contents of the lower triangular part of g are lost during
the computation whereas the strictly upper triagular part of g
is left untouched;
b̲e̲g̲i̲n̲
r̲e̲a̲l̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ sum(i,m,n,a);
v̲a̲l̲u̲e̲ m,n; i̲n̲t̲e̲g̲e̲r̲ i,m,n; r̲e̲a̲l̲ a;
b̲e̲g̲i̲n̲ r̲e̲a̲l̲ s; s:= 0;
f̲o̲r̲ i:= m s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲ s:= s + a;
sum:= s
e̲n̲d̲ sum;
r̲e̲a̲l̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ max (a,b);
v̲a̲l̲u̲e̲ a,b; r̲e̲a̲l̲ a,b;
max:= i̲f̲ a > b t̲h̲e̲n̲ a e̲l̲s̲e̲ b;
p̲r̲o̲c̲e̲d̲u̲r̲e̲ Housholder tridiagonalization 1(n,g,a,bq,norm);
v̲a̲l̲u̲e̲ n; i̲n̲t̲e̲g̲e̲r̲ n; a̲r̲r̲a̲y̲ g,a,bq; r̲e̲a̲l̲ norm;
c̲o̲m̲m̲e̲n̲t̲ nonlocal real procedure sum, max;
c̲o̲m̲m̲e̲n̲t̲ reduces the given real symmetric n by n matrix g
to tridiagonal form using n - 2 elementary orthogonal trans-
formations (I-2ww.) = (I-gamma uu.). Only the lower tri
angular part of g need be given. The diagonal elements and
the squares of the subdiagonal elements of the reduced matrix
are stored in a[1:n] and bq[1:n-1] respectively. norm is set
equal to the infinity norm of the reduced matrix. The columns
of the strictly lower triagular part of g are replaced by the
nonzero portions of the vectors u;
b̲e̲g̲i̲n̲ i̲n̲t̲e̲g̲e̲r̲ i,j,k;
r̲e̲a̲l̲ t,absb,alpha,beta,gamma,sigma;
a̲r̲r̲a̲y̲ p[2:n];
norm:= absb:= 0;
f̲o̲r̲ k:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n - 2 d̲o̲
b̲e̲g̲i̲n̲ a[k]:= g[k,k];
sigma:= bq[k]:= sum(i,k+1,n,g[i,k]|^2);
t:= absb + abs(a[k]); absb:= sqrt(sigma);
norm:= max(norm,t+absb);
i̲f̲ sigma |= 0 t̲h̲e̲n̲
b̲e̲g̲i̲n̲ alpha:= g[k+1,k];
beta:= i̲f̲ alpha < 0 t̲h̲e̲n̲ absb e̲l̲s̲e̲ - absb;
gamma:= 1 / (sigma-alpha*beta); g[k+1,k]:= alpha - beta;
f̲o̲r̲ i:= k + 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲
p[i]:= gamma *
(sum(j,k+1,i,g[i,j]*g[j,k]) + sum(j,i+1,n,g[j,i]*g[j,k]));
t:= 0.5 * gamma * sum(i,k+1,n,g[i,k]*p[i]);
f̲o̲r̲ i:= k + 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲
p[i]:= p[i] - t*g[i,k];
f̲o̲r̲ i:= k + 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲
f̲o̲r̲ j:= k + 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ i d̲o̲
g[i,j]:= g[i,j] - g[i,k]*p[j] - p[i]*g[j,k]
e̲n̲d̲
e̲n̲d̲ k;
a[n-1]:= g[n-1,n-1]; bq[n-1]:= g[n,n-1]|^2;
a[n]:= g[n,n]; t:= abs(g[n,n-1]);
norm:= max(norm,absb+abs(a[n-1])+t);
norm:= max(norm,t+abs(a[n]))
e̲n̲d̲ Housholder tridiagonalization 1;
i̲n̲t̲e̲g̲e̲r̲ i,k,m,m1;
r̲e̲a̲l̲ norm,epsq,lambda,mu,sq1,sq2,u,pq,gamma,t;
a̲r̲r̲a̲y̲ a[1:n],bq[0:n-1];
Housholder tridiagonalization 1(n,g,a,bq,norm);
epsq:= 2.25%-22*norm|^2;
c̲o̲m̲m̲e̲n̲t̲ The tollerance used in the QR iteration depends
on the square of the relative machine precision. Here 2.25%-22
is used which is appropriate for a machine with a 36-bit
mantissa;
mu:= 0; m:= n;
inspect: i̲f̲ m = 0
t̲h̲e̲n̲ g̲o̲t̲o̲ return e̲l̲s̲e̲ i:= k:= m1:= m - 1;
bq[0]:= 0;
i̲f̲ bq[k] < epsq t̲h̲e̲n̲
b̲e̲g̲i̲n̲ g[m,m]:= a[m]; mu:= 0; m:= k;
g̲o̲t̲o̲ inspect
e̲n̲d̲;
f̲o̲r̲ i:= i - 1 w̲h̲i̲l̲e̲ bq[i] > epsq d̲o̲ k:= i;
i̲f̲ k = m1 t̲h̲e̲n̲
b̲e̲g̲i̲n̲ c̲o̲m̲m̲e̲n̲t̲ treat 2 * 2 block separately;
mu:= a[m1]*a[m] - bq[m1]; sq1:= a[m1] + a[m];
sq2:= sqrt((a[m1]-a[m])|^2+4*bq[m1]);
lambda:= 0.5*(i̲f̲ sq1>0 t̲h̲e̲n̲ sq1+sq2 e̲l̲s̲e̲ sq1-sq2);
g[m1,m1]:= lambda; g[m,m]:= mu / lambda;
mu:= 0; m:= m - 2; g̲o̲t̲o̲ inspect
e̲n̲d̲;
lambda:= i̲f̲ abs(a[m]-mu) < 0.5*abs(a[m])
t̲h̲e̲n̲ a[m] + 0.5*sqrt(bq[m1]) e̲l̲s̲e̲ 0.0;
mu:= a[m]; sq1:= sq2:= u:= 0;
f̲o̲r̲ i:= k s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ m1 d̲o̲
b̲e̲g̲i̲n̲ c̲o̲m̲m̲e̲n̲t̲ shortcut single QR iteration;
gamma:= a[i] - lambda - u;
pq:= i̲f̲ sq1 |= 1
t̲h̲e̲n̲ gamma|^2/(1-sq1) e̲l̲s̲e̲ (1-sq2)*bq[i-1];
t:= pq + bq[i]; bq[i-1]:= sq1 * t; sq2:= sq1;
sq1:= bq[i] / t; u:= sq1 * (gamma+a[i+1]-lambda);
a[i]:= gamma + u + lambda
e̲n̲d̲ i;
gamma:= a[m] - lambda - u;
bq[m1]:= sq1 *
(i̲f̲ sq1|=1 t̲h̲e̲n̲ gamma|^2/(1-sq1) e̲l̲s̲e̲ (1-sq2)*bq[m1]);
a[m]:= gamma + lambda; g̲o̲t̲o̲ inspect;
return:
e̲n̲d̲ symmetric QR 1;
f̲o̲r̲ i:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲
f̲o̲r̲ j:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ i d̲o̲
a[i,j]:= read;
symmetric QR 1(n,a);
f̲o̲r̲ i:= 1 s̲t̲e̲p̲ 1 u̲n̲t̲i̲l̲ n d̲o̲
b̲e̲g̲i̲n̲ NLCR; ABSFIXT(2,0,i); PRINT(a[i,i]) e̲n̲d̲
e̲n̲d̲
e̲n̲d̲
