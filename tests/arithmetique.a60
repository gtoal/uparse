b̲e̲g̲i̲n̲
   i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ Factorial(i);
      v̲a̲l̲u̲e̲ i;
      i̲n̲t̲e̲g̲e̲r̲ i;
   b̲e̲g̲i̲n̲
      i̲f̲ i ≤ 1 t̲h̲e̲n̲
        Factorial := 1
      e̲l̲s̲e̲
        Factorial := i × Factorial(i - 1)
   e̲n̲d̲;

   i̲n̲t̲e̲g̲e̲r̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ FibonacciNaive(i);
      v̲a̲l̲u̲e̲ i;
      i̲n̲t̲e̲g̲e̲r̲ i;
   b̲e̲g̲i̲n̲
      i̲f̲ i ≤ 1 t̲h̲e̲n̲
        FibonacciNaive := i
      e̲l̲s̲e̲
        FibonacciNaive := FibonacciNaive(i - 2) + FibonacciNaive(i - 1)
   e̲n̲d̲;

   r̲e̲a̲l̲ p̲r̲o̲c̲e̲d̲u̲r̲e̲ PiGregoryLeibniz(n);
      v̲a̲l̲u̲e̲ n;
      i̲n̲t̲e̲g̲e̲r̲ n;
   b̲e̲g̲i̲n̲
      i̲n̲t̲e̲g̲e̲r̲ i, s;
      r̲e̲a̲l̲ q, r;

      s := 1;
      q := 4;
      r := 0;
      f̲o̲r̲ i := 1 s̲t̲e̲p̲ 2 u̲n̲t̲i̲l̲ n d̲o̲
         b̲e̲g̲i̲n̲
            r := r + s × q / i;
            s := -s;
         e̲n̲d̲;

      PiGregoryLeibniz := r
   e̲n̲d̲;

   i̲n̲t̲e̲g̲e̲r̲ i;
   r̲e̲a̲l̲ r;

   outstring(1, “--------------------------------------------------”);

   i := 7;
   outstring(1, “Factorial(7) = (should be 5040)”);
   i := Factorial(i);
   outinteger(1, i);

   outstring(1, “--------------------------------------------------”);

   i := 16;
   outstring(1, “FibonacciNaive(16) = (should be 987)”);
   i := FibonacciNaive(i);
   outinteger(1, i);

   outstring(1, “--------------------------------------------------”);

   i := 100;
   outstring(1, “PiGregoryLeibniz(100) =”);
   r := PiGregoryLeibniz(i);
   outreal(1, r);

   outstring(1, “--------------------------------------------------”)
e̲n̲d̲
